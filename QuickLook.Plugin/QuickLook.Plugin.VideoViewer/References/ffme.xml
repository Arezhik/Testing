<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ffme</name>
    </assembly>
    <members>
        <member name="T:Unosquare.FFME.Commands.CloseCommand">
            <summary>
            Implements the logic to close a media stream.
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.CloseCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.CloseCommand"/> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.CloseCommand.ExecuteInternal">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.OpenCommand">
            <summary>
            Implements the logic to open a media stream.
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.OpenCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.OpenCommand" /> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="source">The source.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.OpenCommand.Source">
            <summary>
            Gets the source uri of the media stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.OpenCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.OpenCommand.CreateRenderer(Unosquare.FFME.Core.MediaType)">
            <summary>
            Creates a new instance of the renderer of the given type.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns>The renderer that was created</returns>
            <exception cref="T:System.ArgumentException">mediaType has to be of a vild type</exception>
        </member>
        <member name="T:Unosquare.FFME.Commands.PauseCommand">
            <summary>
            Implements the logic to pause the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PauseCommand" /> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.PlayCommand">
            <summary>
            Implements the logic to start or resume media playback
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PlayCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommand">
            <summary>
            Represents a command to be executed against an intance of the MediaElement
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommand.m_HasCompleted">
            <summary>
            Set when the command has finished execution.
            Do not use this field directly. It is managed internally by the command manager.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,Unosquare.FFME.Commands.MediaCommandType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.MediaCommand" /> class.
            </summary>
            <param name="manager">The command manager.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.Manager">
            <summary>
            Gets the associated parent command manager
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommand.HasCompleted">
            <summary>
            Gets a value indicating whether this command is marked as completed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.Complete">
            <summary>
            Marks the command as completed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.Execute">
            <summary>
            Executes the code for the command
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommandManager">
            <summary>
            Represents a singlo point of contact for media command excution.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.#ctor(Unosquare.FFME.MediaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.MediaCommandManager"/> class.
            </summary>
            <param name="mediaElement">The media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommandManager.PendingCount">
            <summary>
            Gets the number of commands pending execution.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.MediaCommandManager.MediaElement">
            <summary>
            Gets the parent media element.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Open(System.Uri)">
            <summary>
            Opens the specified URI.
            The command is processed in a Thread Pool Thread.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Play">
            <summary>
            Starts playing the open media URI.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Pause">
            <summary>
            Pauses the media.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Stop">
            <summary>
            Pauses and rewinds the media
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified position within the media.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.Close">
            <summary>
            Closes the specified media.
            This command gets processed in a threadpool thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.SetSpeedRatio(System.Double)">
            <summary>
            Sets the playback speed ratio.
            </summary>
            <param name="targetSpeedRatio">The target speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.ProcessNext">
            <summary>
            Processes the next command in the command queue.
            This method is called in every block rendering cycle.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.PendingCountOf(Unosquare.FFME.Commands.MediaCommandType)">
            <summary>
            Gets the pending count of the given command type.
            </summary>
            <param name="t">The t.</param>
            <returns>The amount of commands of the given type</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.EnqueueCommand(Unosquare.FFME.Commands.MediaCommand)">
            <summary>
            Enqueues the command for execution.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.WaitFor(Unosquare.FFME.Commands.MediaCommand)">
            <summary>
            Waits for the command to complete execution.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.MediaCommandManager.ExecuteAndWaitFor(Unosquare.FFME.Commands.MediaCommand)">
            <summary>
            Calls the execution of the given command instance 
            and wait for its completion without blocking the dispatcher
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Unosquare.FFME.Commands.MediaCommandType">
            <summary>
            Enumerates the different available Media Command Types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Open">
            <summary>
            The open command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Seek">
            <summary>
            The seek command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Play">
            <summary>
            The play command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Pause">
            <summary>
            The pause command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Stop">
            <summary>
            The stop command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.Close">
            <summary>
            The close command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.MediaCommandType.SetSpeedRatio">
            <summary>
            The set speed ratio command
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.SeekCommand">
            <summary>
            Implements the logic to seek on the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.SeekCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
            <param name="targetPosition">The target position.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.SeekCommand.TargetPosition">
            <summary>
            Gets or sets the target position.
            </summary>
            <value>
            The target position.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.SpeedRatioCommand">
            <summary>
            A command to change speed ratio asynchronously
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.SpeedRatioCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.SpeedRatioCommand"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="speedRatio">The speed ratio.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.SpeedRatioCommand.SpeedRatio">
            <summary>
            The target speed ratio
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.SpeedRatioCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.StopCommand">
            <summary>
            Implements the logic to pause and rewind the media stream
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.MediaCommand" />
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.#ctor(Unosquare.FFME.Commands.MediaCommandManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.StopCommand" /> class.
            </summary>
            <param name="manager">The media element.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.ExecuteInternal">
            <summary>
            Performs the actions that this command implements.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.AtomicBoolean">
            <summary>
            Fast, atomioc boolean combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AtomicBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.AtomicBoolean"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AtomicBoolean.Value">
            <summary>
            Gets the latest value written by any of the processors in the machine
            Setting
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.AtomicDouble">
            <summary>
            Fast, atomioc double combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AtomicDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.AtomicDouble"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AtomicDouble.Value">
            <summary>
            Gets or sets the latest value written by any of the processors in the machine
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.AtomicLong">
            <summary>
            Fast, atomioc long combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AtomicLong.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.AtomicLong"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AtomicLong.Value">
            <summary>
            Gets or sets the latest value written by any of the processors in the machine
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFmpegEx">
            <summary>
            Manual additions to API calls not available in FFmpeg.Autogen
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFmpegEx.GetErrorMessage(System.Int32)">
            <summary>
            Gets the FFmpeg error mesage based on the error code
            </summary>
            <param name="code">The code.</param>
            <returns>The decoded error message</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.RC">
            <summary>
            A reference counter to keep track of unmanaged objects
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.SyncLock">
            <summary>
            The synchronization lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.m_Current">
            <summary>
            The current reference counter instance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.Instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.UnmanagedType">
            <summary>
            The types of tracked unmanaged types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Packet">
            <summary>
            The packet
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Frame">
            <summary>
            The frame
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.FilterGraph">
            <summary>
            The filter graph
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwrContext">
            <summary>
            The SWR context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.CodecContext">
            <summary>
            The codec context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwsContext">
            <summary>
            The SWS context
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.Current">
            <summary>
            Gets the singleton instance of the reference counter
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.InstancesByLocation">
            <summary>
            Gets the number of instances by location.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(Unosquare.FFME.Core.RC.UnmanagedType,System.IntPtr,System.String)">
            <summary>
            Adds the specified unmanaged object reference.
            </summary>
            <param name="t">The t.</param>
            <param name="ptr">The r.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.IntPtr)">
            <summary>
            Removes the specified unmanaged object reference
            </summary>
            <param name="ptr">The PTR.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.Void*)">
            <summary>
            Removes the specified unmanaged object reference.
            </summary>
            <param name="ptr">The unmanaged object reference.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVPacket*,System.String)">
            <summary>
            Adds the specified packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwrContext*,System.String)">
            <summary>
            Adds the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwsContext*,System.String)">
            <summary>
            Adds the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVCodecContext*,System.String)">
            <summary>
            Adds the specified codec.
            </summary>
            <param name="codec">The codec.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFrame*,System.String)">
            <summary>
            Adds the specified frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFilterGraph*,System.String)">
            <summary>
            Adds the specified filtergraph.
            </summary>
            <param name="filtergraph">The filtergraph.</param>
            <param name="location">The location.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.ReferenceEntry">
            <summary>
            A reference entry
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.GenericMediaLogger`1">
            <summary>
            Represents a generic Logger
            </summary>
            <typeparam name="T">The sender's concrete type</typeparam>
            <seealso cref="T:Unosquare.FFME.Core.IMediaLogger" />
        </member>
        <member name="M:Unosquare.FFME.Core.GenericMediaLogger`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.GenericMediaLogger`1"/> class.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.GenericMediaLogger`1.Sender">
            <summary>
            Holds a reference to the sender.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.GenericMediaLogger`1.Log(Unosquare.FFME.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.IMediaLogger">
            <summary>
            A very simple and standard interface for message logging
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.IMediaLogger.Log(Unosquare.FFME.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message of the given type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.MediaTypeDictionary`1">
            <summary>
            Represents a very simple dictionary for MediaType keys
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Core.MediaTypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.MediaTypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.MediaTypeDictionary`1.Item(Unosquare.FFME.Core.MediaType)">
            <summary>
            Gets or sets the item with the specified key.
            return the default value of the value type when the key does not exist.
            </summary>
            <param name="key">The key.</param>
            <returns>The item</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.NativeMethods">
            <summary>
            FFmpeg Registration Native Methods
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.NativeMethods.SetDllDirectory(System.String)">
            <summary>
            Sets the DLL directory in which external dependencies can be located.
            </summary>
            <param name="lpPathName">the full path.</param>
            <returns>True if set, false if not set</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.NativeMethods.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Fast pointer memory block copy function
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.NativeMethods.FillMemory(System.IntPtr,System.UInt32,System.Byte)">
            <summary>
            Fills the memory.
            </summary>
            <param name="destination">The destination.</param>
            <param name="length">The length.</param>
            <param name="fill">The fill.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.Runner">
            <summary>
            Provides helpers tor un code in different modes on the UI dispatcher.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Runner.UIDispatcher">
            <summary>
            Gets the UI dispatcher.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Runner.UIInvoke(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Synchronously invokes the given instructions on the main application dispatcher.
            </summary>
            <param name="priority">The priority.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.Runner.UIEnqueueInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object[])">
            <summary>
            Enqueues the given instructions with the given arguments on the main application dispatcher.
            This is a way to execute code in a fire-and-forget style
            </summary>
            <param name="priority">The priority.</param>
            <param name="action">The action.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.Runner.ExitFrame(System.Object)">
            <summary>
            Exits the execution frame.
            </summary>
            <param name="f">The f.</param>
            <returns>Always a null value</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.CircularBuffer">
            <summary>
            A fixed-size buffer that acts as an infinite length one.
            This buffer is backed by unmanaged, very fast memory so ensure you call
            the dispose method when you are donde using it.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Core.CircularBuffer.SyncLock">
            <summary>
            The locking object to perform synchronization.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.CircularBuffer.IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.CircularBuffer.Buffer">
            <summary>
            The unbmanaged buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.CircularBuffer"/> class.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Core.CircularBuffer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.Length">
            <summary>
            Gets the capacity of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.ReadIndex">
            <summary>
            Gets the current, 0-based read index
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.RewindableCount">
            <summary>
            Gets the maximum rewindable amount of bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.WriteIndex">
            <summary>
            Gets the current, 0-based write index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.WriteTag">
            <summary>
            Gets an the object associated with the last write
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.ReadableCount">
            <summary>
            Gets the available bytes to read.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.WritableCount">
            <summary>
            Gets the number of bytes that can be written.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CircularBuffer.CapacityPercent">
            <summary>
            Gets percentage of used bytes (readbale/available, from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Skip(System.Int32)">
            <summary>
            Skips the specified amount requested bytes to be read.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested bytes GT readable count</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Rewind(System.Int32)">
            <summary>
            Rewinds the read position by specified requested amount of bytes.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested GT rewindable</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads the specified number of bytes into the target array.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="target">The target.</param>
            <param name="targetOffset">The target offset.</param>
            <exception cref="T:System.InvalidOperationException">When requested GT readble</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Write(System.IntPtr,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Writes data to the backing buffer using the specified pointer and length.
            and associating a write tag for this operation.
            </summary>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
            <param name="writeTag">The write tag.</param>
            <param name="overwrite">if set to <c>true</c>, overwrites the data even if it has not been read.</param>
            <exception cref="T:System.InvalidOperationException">Read</exception>
            <exception cref="T:System.InvalidOperationException">When read needs to be called more!</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Clear">
            <summary>
            Resets all states as if this buffer had just been created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.CircularBuffer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.Clock">
            <summary>
            A time measurement artifact.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Clock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.Clock"/> class.
            The clock starts poaused and at the 0 position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Clock.Position">
            <summary>
            Gets or sets the clock position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Clock.IsRunning">
            <summary>
            Gets a value indicating whether the clock is running.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Clock.SpeedRatio">
            <summary>
            Gets or sets the speed ratio at which the clock runs.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Clock.Play">
            <summary>
            Starts or resumes the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Clock.Pause">
            <summary>
            Pauses the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Clock.Reset">
            <summary>
            Sets the clock position to 0 and stops it.
            The speed ratio is not modified.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.Constants">
            <summary>
            Defines library-wide constants
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.Constants.EnableFFmpegLockManager">
            <summary>
            Determines if the av_lockmgr_register is called.
            If this is set to false, then the number of threads will be set to 1.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.AudioParams">
            <summary>
            Contains audio format properties essential
            to audio resampling
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.AudioParams.Output">
            <summary>
            The standard output audio spec
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.AudioParams"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Core.AudioParams"/> class from being created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.#ctor(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.AudioParams"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.ChannelLayout">
            <summary>
            Gets the channel layout.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.SamplesPerChannel">
            <summary>
            Gets the samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.SampleRate">
            <summary>
            Gets the audio sampling rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.Format">
            <summary>
            Gets the sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.AudioParams.BufferLength">
            <summary>
            Gets the length of the buffer required to store 
            the samples in the current format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.CreateSource(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a source audio spec based on the info in the given audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.CreateTarget(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a target audio spec using the sample quantities provided 
            by the given source audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.AudioParams.AreCompatible(Unosquare.FFME.Core.AudioParams,Unosquare.FFME.Core.AudioParams)">
            <summary>
            Determines if the audio specs are compatible between them.
            They must share format, channel count, layout and sample rate
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>True if the params are compatible, flase otherwise.</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.CodecOption">
            <summary>
            A single codec option along with a stream specifier.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.CodecOption.#ctor(Unosquare.FFME.Core.StreamSpecifier,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.CodecOption"/> class.
            </summary>
            <param name="spec">The spec.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.CodecOption.StreamSpecifier">
            <summary>
            Gets or sets the stream specifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CodecOption.Key">
            <summary>
            Gets or sets the option name
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.CodecOption.Value">
            <summary>
            Gets or sets the option value.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.MediaType">
            <summary>
            Enumerates the different Media Types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.MediaType.None">
            <summary>
            Represents an unexisting media type (-1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.MediaType.Video">
            <summary>
            The video media type (0)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.MediaType.Audio">
            <summary>
            The audio media type (1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.MediaType.Subtitle">
            <summary>
            The subtitle media type (3)
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionaryEntry">
            <summary>
            An AVDictionaryEntry wrapper
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionaryEntry.#ctor(FFmpeg.AutoGen.AVDictionaryEntry*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionaryEntry"/> class.
            </summary>
            <param name="entryPointer">The entry pointer.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionary">
            <summary>
            An AVDictionary management class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFDictionary.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Count">
            <summary>
            Gets the number of elements in the dictionary
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.ToDictionary(FFmpeg.AutoGen.AVDictionary*)">
            <summary>
            Converts the AVDictionary to a regular dictionary.
            </summary>
            <param name="dictionary">The dictionary to convert from.</param>
            <returns>the converterd dictionary</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(FFmpeg.AutoGen.AVDictionary*,System.String,System.Boolean)">
            <summary>
            A wrapper for the av_dict_get method
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The Entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Fill(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills this dictionary with a set of options
            </summary>
            <param name="other">The other dictionary (source)</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.First">
            <summary>
            Gets the first entry. Null if no entries.
            </summary>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Next(Unosquare.FFME.Core.FFDictionaryEntry)">
            <summary>
            Gets the next entry based on the provided prior entry.
            </summary>
            <param name="prior">The prior entry.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.HasKey(System.String,System.Boolean)">
            <summary>
            Determines if the given key exists in the dictionary
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(System.String,System.Boolean)">
            <summary>
            Gets the entry given the key.
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Get(System.String)">
            <summary>
            Gets the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="dontOverwrite">if set to <c>true</c> [dont overwrite].</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Remove(System.String)">
            <summary>
            Removes the entry with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.StreamSpecifier">
            <summary>
            A managed representation of an FFmpeg stream specifier
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.StreamSpecifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.StreamSpecifier"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.StreamSpecifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.StreamSpecifier"/> class.
            </summary>
            <param name="streamId">The stream identifier.</param>
            <exception cref="T:System.ArgumentException">streamId</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.StreamSpecifier.#ctor(Unosquare.FFME.Core.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.StreamSpecifier"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <exception cref="T:System.ArgumentException">streamType</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.StreamSpecifier.#ctor(Unosquare.FFME.Core.MediaType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.StreamSpecifier"/> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="streamId">The stream identifier.</param>
            <exception cref="T:System.ArgumentException">
            streamType
            or
            streamId
            </exception>
        </member>
        <member name="P:Unosquare.FFME.Core.StreamSpecifier.Types">
            <summary>
            Provides suffixes for the different media types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.StreamSpecifier.StreamId">
            <summary>
            Gets the stream identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.StreamSpecifier.StreamSuffix">
            <summary>
            Gets the stream suffix.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.StreamSpecifier.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this stream specifier.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Core.Utils">
            <summary>
            Provides a set of utilities to perfrom logging, text formatting, 
            conversion and other handy calculations.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.Utils"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Utils.IsInDesignTime">
            <summary>
            Determines if we are currently in Design Time
            </summary>
            <value>
            <c>true</c> if this instance is in design time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Core.Utils.IsInDebugMode">
            <summary>
            Gets a value indicating whether this instance is in debug mode.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.Utils.AssemblyLocation">
            <summary>
            Gets the assembly location.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.PtrToString(System.Byte*)">
            <summary>
            Converts a byte pointer to a string
            </summary>
            <param name="bytePtr">The byte PTR.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.PtrToStringUTF8(System.Byte*)">
            <summary>
            Converts a byte pointer to a UTF8 encoded string.
            </summary>
            <param name="bytePtr">The byte PTR.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToMultipleOf(System.Double,System.Double)">
            <summary>
            Converts the given value to a value that is of the given multiple. 
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Double,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Int64,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Double,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS in seconds.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Int64,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Double)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToTimeSpan(System.Int64)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.ToDouble(FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a fraction to a double
            </summary>
            <param name="rational">The rational.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.RegisterFFmpeg(System.String)">
            <summary>
            Registers FFmpeg library and initializes its components.
            It only needs to be called once but calling it more than once
            has no effect. Returns the path that FFmpeg was registered from.
            </summary>
            <param name="overridePath">The override path.</param>
            <returns>Returns the path that FFmpeg was registered from.</returns>
            <exception cref="T:System.IO.FileNotFoundException">When the folder is not found</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.Log(System.Object,Unosquare.FFME.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="sender">The sender.</param>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">sender</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.LogRenderBlock(Unosquare.FFME.MediaElement,Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan,System.Int32)">
            <summary>
            Logs a block rendering operation as a Trace Message
            if the debugger is attached.
            </summary>
            <param name="element">The media element.</param>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <param name="renderIndex">Index of the render.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.Format(System.TimeSpan)">
            <summary>
            Returns a formatted timestamp string in Seconds
            </summary>
            <param name="ts">The ts.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.FormatElapsed(System.DateTime)">
            <summary>
            Returns a formatted string with elapsed milliseconds between now and
            the specified date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.Format(System.Int64,System.Double)">
            <summary>
            Returns a fromatted string, dividing by the specified
            factor. Useful for debugging longs with byte positions or sizes.
            </summary>
            <param name="ts">The ts.</param>
            <param name="divideBy">The divide by.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.StripSrtFormat(System.String)">
            <summary>
            Strips the SRT format and returns plain text.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.StripAssFormat(System.String)">
            <summary>
            Strips a line of text from the ASS format.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.LogOutputter_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the LogOutputter timer.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.FFmpegManageLocking(System.Void**,FFmpeg.AutoGen.AVLockOp)">
            <summary>
            Manages FFmpeg Multithreaded locking
            </summary>
            <param name="mutex">The mutex.</param>
            <param name="lockingOperation">The op.</param>
            <returns>
            0 for success, 1 for error
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Core.Utils.FFmpegLog(System.Void*,System.Int32,System.String,System.Byte*)">
            <summary>
            Log message callback from ffmpeg library.
            </summary>
            <param name="p0">The p0.</param>
            <param name="level">The level.</param>
            <param name="format">The format.</param>
            <param name="vl">The vl.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType">
            <summary>
            Enumerates the differen Closed-Captioning Colors
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.None">
            <summary>
            No color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.White">
            <summary>
            The white color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.WhiteTransparent">
            <summary>
            The white transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Green">
            <summary>
            The green color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.GreenTransparent">
            <summary>
            The green transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Blue">
            <summary>
            The blue color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.BlueTransparent">
            <summary>
            The blue transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Cyan">
            <summary>
            The cyan color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.CyanTransparent">
            <summary>
            The cyan transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Red">
            <summary>
            The red color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.RedTransparent">
            <summary>
            The red transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Yellow">
            <summary>
            The yellow color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.YellowTransparent">
            <summary>
            The yellow transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.Magenta">
            <summary>
            The magenta color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.MagentaTransparent">
            <summary>
            The magenta transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.WhiteItalics">
            <summary>
            The white italics color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.WhiteItalicsTransparent">
            <summary>
            The white italics transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.BackgroundTransparent">
            <summary>
            The background transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.ForegroundBlack">
            <summary>
            The foreground black color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCColorType.ForegroundBlackUnderline">
            <summary>
            The foreground black underline color
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType">
            <summary>
            Enumerates the Closed-Captioning misc commands
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.None">
            <summary>
            No command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.Resume">
            <summary>
            The resume command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.Backspace">
            <summary>
            The backspace command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.AlarmOff">
            <summary>
            The alarm off command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.AlarmOn">
            <summary>
            The alarm on command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.ClearLine">
            <summary>
            The clear line command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.RollUp2">
            <summary>
            The roll up2 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.RollUp3">
            <summary>
            The roll up3 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.RollUp4">
            <summary>
            The roll up4 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.StartCaption">
            <summary>
            The start caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.StartNonCaption">
            <summary>
            The star non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.ResumeNonCaption">
            <summary>
            The resume non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.ClearScreen">
            <summary>
            The clear screen command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.NewLine">
            <summary>
            The new line command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.ClearBuffer">
            <summary>
            The clear buffer command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCMiscCommandType.EndCaption">
            <summary>
            The end caption command
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType">
            <summary>
            Defines Closed-Captioning Packet types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Unrecognized">
            <summary>
            The unrecognized packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.NullPad">
            <summary>
            The null pad packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.XdsClass">
            <summary>
            The XDS class packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.MiscCommand">
            <summary>
            The misc command packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Text">
            <summary>
            The text packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.MidRow">
            <summary>
            The mid row packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Preamble">
            <summary>
            The preamble packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Color">
            <summary>
            The color packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Charset">
            <summary>
            The charset packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCPacketType.Tabs">
            <summary>
            The tabs packet type
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType">
            <summary>
            Enumerates the differen Closed-Captioning Styles
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.None">
            <summary>
            The none style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.White">
            <summary>
            The white style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteUnderline">
            <summary>
            The white underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Green">
            <summary>
            The green style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.GreenUnderline">
            <summary>
            The green underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Blue">
            <summary>
            The blue style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.BlueUnderline">
            <summary>
            The blue underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Cyan">
            <summary>
            The cyan style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.CyanUnderline">
            <summary>
            The cyan underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Red">
            <summary>
            The red style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.RedUnderline">
            <summary>
            The red underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Yellow">
            <summary>
            The yellow style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.YellowUnderline">
            <summary>
            The yellow underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.Magenta">
            <summary>
            The magenta style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.MagentaUnderline">
            <summary>
            The magenta underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteItalics">
            <summary>
            The white italics style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteItalicsUnderline">
            <summary>
            The white italics underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent0">
            <summary>
            The white indent0 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent0Underline">
            <summary>
            The white indent0 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent4">
            <summary>
            The white indent4 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent4Underline">
            <summary>
            The white indent4 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent8">
            <summary>
            The white indent8 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent8Underline">
            <summary>
            The white indent8 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent12">
            <summary>
            The white indent12 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent12Underline">
            <summary>
            The white indent12 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent16">
            <summary>
            The white indent16 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent16Underline">
            <summary>
            The white indent16 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent20">
            <summary>
            The white indent20 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent20Underline">
            <summary>
            The white indent20 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent24">
            <summary>
            The white indent24 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent24Underline">
            <summary>
            The white indent24 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent28">
            <summary>
            The white indent28 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCStyleType.WhiteIndent28Underline">
            <summary>
            The white indent28 underline style
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType">
            <summary>
            Defines Closed-Captioning XDS Packet Classes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.None">
            <summary>
            The none XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.CurrentStart">
            <summary>
            The current start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.CurrentContinue">
            <summary>
            The current continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.FutureStart">
            <summary>
            The future start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.FutureContinue">
            <summary>
            The future continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.ChannelStart">
            <summary>
            The channel start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.ChannelContinue">
            <summary>
            The channel continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.MiscStart">
            <summary>
            The misc start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.MiscContinue">
            <summary>
            The misc continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.PublicServiceStart">
            <summary>
            The public service start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.PublicServiceContinue">
            <summary>
            The public service continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.ReservedStart">
            <summary>
            The reserved start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.ReservedContinue">
            <summary>
            The reserved continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.PrivateStart">
            <summary>
            The private start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.PrivateContinue">
            <summary>
            The private continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.CCXdsClassType.EndAll">
            <summary>
            The end all XDS Class
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection">
            <summary>
            Represents a set of Closed Captioning Tracks
            in a stream of CC packets.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection.CC1">
            <summary>
            The CC1 Track Packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection.CC2">
            <summary>
            The CC2 Track Packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection.CC3">
            <summary>
            The CC3 Track Packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection.CC4">
            <summary>
            The CC4 Track Packets
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionCollection.Add(Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket)">
            <summary>
            Adds the specified packet and automatically places it on the right track.
            If the track requires sorting it does so by reordering packets based on their timestamp.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket">
            <summary>
            Represents a 3-byte packet of closed-captioning data in EIA-608 format.
            See: http://jackyjung.tistory.com/attachment/499e14e28c347DB.pdf
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.D">
            <summary>
            Holds the data bytes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="header">The header.</param>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.D0">
            <summary>
            Gets the first of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.D1">
            <summary>
            Gets the second of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.Timestamp">
            <summary>
            Gets the timestamp this packet applies to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.NtscField">
            <summary>
            Gets the NTSC field (1 or 2).
            0 for unknown/null packet
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.Channel">
            <summary>
            Gets the channel. 0 for any, 1 or 2 for specific channel toggle.
            0 just means to use what a prior packet had specified.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.PacketType">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.Tabs">
            <summary>
            Gets the number of tabs, if the packet type is of Tabs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.MiscCommand">
            <summary>
            Gets the Misc Command, if the packet type is of Misc Command
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.Color">
            <summary>
            Gets the Color, if the packet type is of Color
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.MidRowStyle">
            <summary>
            Gets the Style, if the packet type is of Mid Row Style
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.XdsClass">
            <summary>
            Gets the XDS Class, if the packet type is of XDS
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.PreambleRow">
            <summary>
            Gets the Preamble Row Number (1 through 15), if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.PreambleStyle">
            <summary>
            Gets the Style, if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.Text">
            <summary>
            Gets the text, if the packet type is of text.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.HeaderHasMarkers(System.Byte)">
            <summary>
            Checks that the header byte starts with 11111b (5 ones binary)
            </summary>
            <param name="data">The data.</param>
            <returns>If header has markers</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.IsHeaderValidFalgSet(System.Byte)">
            <summary>
            Determines whether the valid flag of the header byte is set.
            </summary>
            <param name="data">The data.</param>
            <returns>
              <c>true</c> if [is header valid falg set] [the specified data]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.GetHeaderFieldType(System.Byte)">
            <summary>
            Gets the NTSC field type (1 or 2).
            Returns 0 for unknown.
            </summary>
            <param name="data">The data.</param>
            <returns>The field type</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.IsEmptyChannelData(System.Byte,System.Byte)">
            <summary>
            Determines whether the data is null padding
            </summary>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
            <returns>
              <c>true</c> if [is empty channel data] [the specified d0]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.DropParityBit(System.Byte)">
            <summary>
            Drops the parity bit from the data byte.
            </summary>
            <param name="input">The input.</param>
            <returns>The byte without a parity bit.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.ClosedCaptions.ClosedCaptionPacket.ToEia608Char(System.Byte)">
            <summary>
            Converst an ASCII character code to an EIA-608 char (in Unicode)
            </summary>
            <param name="input">The input.</param>
            <returns>The charset char.</returns>
        </member>
        <member name="F:Unosquare.FFME.Decoding.HardwareAccelerator.GetFormatCallback">
            <summary>
            The get format callback
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Decoding.HardwareAccelerator"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Decoding.HardwareAccelerator"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.All">
            <summary>
            A dicitionary containing all Accelerators by pixel format
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Dxva2">
            <summary>
            Gets the dxva2 accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.PixelFormat">
            <summary>
            Gets the hardware output pixel format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.DeviceType">
            <summary>
            Gets the type of the hardware device.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.AttachDevice(Unosquare.FFME.Decoding.VideoComponent)">
            <summary>
            Attaches a hardware device context to the specified video component.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.Exception">Throws when unable to initialize the hardware device</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.DetachDevice(Unosquare.FFME.Decoding.VideoComponent)">
            <summary>
            Detaches and disposes the hardware device context from the specified video component
            </summary>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.ExchangeFrame(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVFrame*,System.Boolean@)">
            <summary>
            Downloads the frame from the hardware into a software frame if possible.
            The input hardware frame gets freed and the return value will point to the new software frame
            </summary>
            <param name="codecContext">The codec context.</param>
            <param name="input">The input.</param>
            <param name="comesFromHardware">if set to <c>true</c> [comes from hardware] otherwise, hardware decoding was not perfomred.</param>
            <returns>
            The frame downloaded from the device into RAM
            </returns>
            <exception cref="T:System.Exception">Failed to transfer data to output frame</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.GetPixelFormat(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVPixelFormat*)">
            <summary>
            Gets the pixel format.
            Port of (get_format) method in ffmpeg.c
            </summary>
            <param name="avctx">The codec context.</param>
            <param name="pix_fmts">The pixel formats.</param>
            <returns>The real pixel format that the codec will be using</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SeekRequirement">
            <summary>
            Enumerates the seek target requirement levels.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.MainComponentOnly">
            <summary>
            Seek requirement is satisfied when
            the main component has frames in the seek range.
            This is the fastest option.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.AudioAndVideo">
            <summary>
            Seek requirement is satisfied when
            the both audio and video comps have frames in the seek range.
            This is the recommended option.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.SeekRequirement.AllComponents">
            <summary>
            Seek requirement is satisfied when
            ALL components have frames in the seek range
            This is NOT recommended as it forces large amounts of
            frames to get decoded in subtitle files.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioBlock">
            <summary>
            A scaled, preallocated audio frame container.
            The buffer is in 16-bit signed, interleaved sample data
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioBlock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.AudioBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.Buffer">
            <summary>
            Gets a pointer to the first byte of the data buffer.
            The format signed 16-bits per sample, channel interleaved
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.BufferLength">
            <summary>
            Gets the length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.SamplesPerChannel">
            <summary>
            Gets the available samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.AudioBufferLength">
            <summary>
            The picture buffer length of the last allocated buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioBlock.AudioBuffer">
            <summary>
            Holds a reference to the last allocated buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioBlock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioFrame">
            <summary>
            Represents a wrapper from an unmanaged FFmpeg audio frame
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.AudioFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaBlockBuffer">
            <summary>
            Represents a set of preallocated media blocks of the same media type.
            A block buffer contains playback and pool blocks. Pool blocks are blocks that
            can be reused. Playback blocks are blocks that have been filled.
            This class is thread safe.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaBlockBuffer.PoolBlocks">
            <summary>
            The blocks that are available to be filled.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaBlockBuffer.PlaybackBlocks">
            <summary>
            The blocks that are available for rendering.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.#ctor(System.Int32,Unosquare.FFME.Core.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaBlockBuffer"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.MediaType">
            <summary>
            Gets the media type of the block buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.RangeStartTime">
            <summary>
            Gets the start time of the first block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.RangeEndTime">
            <summary>
            Gets the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.RangeDuration">
            <summary>
            Gets the range of time between the first block and the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.AverageBlockDuration">
            <summary>
            Gets the average duration of the currently available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.IsMonotonic">
            <summary>
            Gets a value indicating whether all the durations of the blocks are equal
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.Count">
            <summary>
            Gets the number of available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.Capacity">
            <summary>
            Gets the maximum count of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.CapacityPercent">
            <summary>
            Gets the usage percent from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.IsFull">
            <summary>
            Gets a value indicating whether the playback blocks are all allocated.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Decoding.MediaBlock" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Decoding.MediaBlock"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The media block</returns>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlockBuffer.Item(System.TimeSpan)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Decoding.MediaBlock" /> at the specified timestamp.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Decoding.MediaBlock"/>.
            </value>
            <param name="at">At time.</param>
            <returns>The media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.GetRangePercent(System.TimeSpan)">
            <summary>
            Gets the percentage of the range for the given time position.
            </summary>
            <param name="position">The position.</param>
            <returns>The percent of the range</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.Next(Unosquare.FFME.Decoding.MediaBlock)">
            <summary>
            Retrieves the block following the provided current block
            </summary>
            <param name="current">The current block.</param>
            <returns>The next media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.Add(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Adds a block to the playback blocks by converting the given frame.
            If there are no more blocks in the pool, the oldest block is returned to the pool
            and reused for the new block. The source frame is automatically disposed.
            </summary>
            <param name="source">The source.</param>
            <param name="container">The container.</param>
            <returns>The filled block.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.Clear">
            <summary>
            Clears all the playback blocks returning them to the 
            block pool.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.IsInRange(System.TimeSpan)">
            <summary>
            Determines whether the given render time is within the range of playback blocks.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>
              <c>true</c> if [is in range] [the specified render time]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.IndexOf(System.TimeSpan)">
            <summary>
            Retrieves the index of the playback block corresponding to the specified
            render time. This uses very fast binary and linear search commbinations.
            If there are no playback blocks it returns -1.
            If the render time is greater than the range end time, it returns the last playback block index.
            If the render time is less than the range start time, it returns the first playback block index.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>The media block's index</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.Debug">
            <summary>
            Returns a formatted string with information about this buffer
            </summary>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlockBuffer.CreateBlock">
            <summary>
            Block factory method.
            </summary>
            <returns>The media frame</returns>
            <exception cref="T:System.InvalidCastException">MediaBlock</exception>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioComponent">
            <summary>
            Provides audio sample extraction, decoding and scaling functionality.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.Scaler">
            <summary>
            Holds a reference to the audio resampler
            This resampler gets disposed upon disposal of this object.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.LastSourceSpec">
            <summary>
            Used to determine if we have to reset the scaler parameters
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.Channels">
            <summary>
            Gets the number of audio channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.BitsPerSample">
            <summary>
            Gets the bits per sample.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.DestroyFiltergraph">
            <summary>
            Destroys the filtergraph releasing unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the audio filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filtergraph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaFrame">
            <summary>
            Represents a wrapper for an unmanaged frame.
            Derived classes implement the specifics of each media type.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.#ctor(System.Void*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaFrame" /> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="component">The component.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>
            The type of the media.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StartTime">
            <summary>
            Gets the start time of the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.EndTime">
            <summary>
            Gets the end time of the frame
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamIndex">
            <summary>
            Gets the index of the stream from which this frame was decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.HasValidStartTime">
            <summary>
            Gets or sets a value indicating whether this frame obtained its start time
            form a valid frame pts value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.IsStale">
            <summary>
            When the unmanaged frame is released (freed from unmanaged memory)
            this property will return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamTimeBase">
            <summary>
            Gets the time base of the stream that generated this frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CompareTo(Unosquare.FFME.Decoding.MediaFrame)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaBlock">
            <summary>
            A base class for blocks of the deifferent MediaTypes.
            Blocks are the result of decoding and scaling a frame.
            Blocks have preallocated buffers wich makes them memory and CPU efficient
            Reue blocks as much as possible. Once you create a block from a frame,
            you don't need the frame anymore so make sure you dispose the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.IsStartTimeGuessed">
            <summary>
            Gets or sets a value indicating whether the start time was guessed from siblings
            or the source frame PTS comes from a NO PTS value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.StartTime">
            <summary>
            Gets the time at which this data should be presented (PTS)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.StreamIndex">
            <summary>
            Gets or sets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaBlock.MidTime">
            <summary>
            Gets the middle timestamp between the start and end time.
            Returns Zero if the duration is Zero or negative.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlock.Contains(System.TimeSpan)">
            <summary>
            Determines whether this media block holds the specified position.
            Returns false if it does not have a valid duration.
            </summary>
            <param name="position">The position.</param>
            <returns>
              <c>true</c> if [contains] [the specified position]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlock.CompareTo(Unosquare.FFME.Decoding.MediaBlock)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="other" /> in the sort order.  Zero This instance occurs in the same position in the sort order as <paramref name="other" />. Greater than zero This instance follows <paramref name="other" /> in the sort order.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponent">
            <summary>
            Represents a media component of a given media type within a 
            media container. Derived classes must implement frame handling
            logic.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.CodecContext">
            <summary>
            Holds a reference to the Codec Context.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.Stream">
            <summary>
            Holds a reference to the associated input context stream
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.Packets">
            <summary>
            Contains the packets pending to be sent to the decoder
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.SentPackets">
            <summary>
            The packets that have been sent to the decoder. We keep track of them in order to dispose them
            once a frame has been decoded.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.IsDisposed">
            <summary>
            Detects redundant, unmanaged calls to the Dispose method.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_TotalBytesRead">
            <summary>
            The m total bytes read
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
            <exception cref="T:Unosquare.FFME.MediaContainerException">The container exception.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Container">
            <summary>
            Gets the media container associated with this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamIndex">
            <summary>
            Gets the index of the associated stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StartTimeOffset">
            <summary>
            Returns the component's stream start timestamp as reported 
            by the start time of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Duration">
            <summary>
            Gets the duration of this stream component.
            If there is no such information it will return TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.PacketBufferLength">
            <summary>
            Gets the current length in bytes of the 
            packet buffer. Limit your Reads to something reasonable before
            this becomes too large.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.PacketBufferCount">
            <summary>
            Gets the number of packets in the queue.
            Decode packets until this number becomes 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.TotalBytesRead">
            <summary>
            Gets the total amount of bytes read by this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecId">
            <summary>
            Gets the ID of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecName">
            <summary>
            Gets the name of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Bitrate">
            <summary>
            Gets the bitrate of this component as reported by the codec context. 
            Returns 0 for unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamInfo">
            <summary>
            Gets the stream information.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ClearPacketQueues">
            <summary>
            Clears the pending and sent Packet Queues releasing all memory held by those packets.
            Additionally it flushes the codec buffered packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendEmptyPacket">
            <summary>
            Sends a special kind of packet (an empty packet)
            that tells the decoder to enter draining mode.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Pushes a packet into the decoding Packet Queue
            and processes the packet in order to try to decode
            1 or more frames. The packet has to be within the range of
            the start time and end time of 
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ReceiveFrames">
            <summary>
            Decodes the next packet in the packet queue in this media component.
            Returns the decoded frames.
            </summary>
            <returns>The received Media Frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.IsEmptyPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Determines whether the specified packet is a Null Packet (data = null, size = 0)
            These null packets are used to read multiple frames from a single packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>
              <c>true</c> if [is empty packet] [the specified packet]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CreateFrameSource(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Creates a frame source object given the raw FFmpeg subtitle reference.
            </summary>
            <param name="frame">The raw FFmpeg subtitle pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CloseComponent">
            <summary>
            Releases the existing codec context and clears and disposes the packet queues.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.DecodeNextPacketInternal">
            <summary>
            Receives 0 or more frames from the next available packet in the Queue.
            This sends the first available packet to dequeue to the decoder
            and uses the decoded frames (if any) to their corresponding
            ProcessFrame method.
            </summary>
            <returns>The list of frames</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponentSet">
            <summary>
            Represents a set of Audio, Video and Subtitle components.
            This class is useful in order to group all components into 
            a single set. Sending packets is automatically handled by
            this class. This class is thread safe.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.Items">
            <summary>
            The internal Components
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.SyncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.CachedComponents">
            <summary>
            Provides a cached array to the components backing the All property.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponentSet.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponentSet"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.MediaTypes">
            <summary>
            Gets the available component media types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.All">
            <summary>
            Gets all the components in a read-only collection.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Main">
            <summary>
            Gets the main media component of the stream to which time is synchronized.
            By order of priority, first Audio, then Video
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Video">
            <summary>
            Gets the video component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Audio">
            <summary>
            Gets the audio component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Subtitles">
            <summary>
            Gets the subtitles component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.PacketBufferLength">
            <summary>
            Gets the current length in bytes of the packet buffer.
            These packets are the ones that have not been yet deecoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.PacketBufferCount">
            <summary>
            Gets the number of packets that have not been
            fed to the decoders.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.TotalBytesRead">
            <summary>
            Gets the total bytes read by all components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasVideo">
            <summary>
            Gets a value indicating whether this instance has a video component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasAudio">
            <summary>
            Gets a value indicating whether this instance has an audio component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasSubtitles">
            <summary>
            Gets a value indicating whether this instance has a subtitles component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Item(Unosquare.FFME.Core.MediaType)">
            <summary>
            Gets or sets the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> with the specified media type.
            Setting a new component on an existing media type component will throw.
            Getting a non existing media component fro the given media type will return null.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns>The media component</returns>
            <exception cref="T:System.ArgumentException">When the media type is invalid</exception>
            <exception cref="T:System.ArgumentNullException">MediaComponent</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Remove(Unosquare.FFME.Core.MediaType)">
            <summary>
            Removes the component of specified media type (if registered).
            It calls the dispose method of the media component too.
            </summary>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendPacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Sends the specified packet to the correct component by reading the stream index
            of the packet that is being sent. No packet is sent if the provided packet is set to null.
            Returns the media type of the component that accepted the packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>The media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendEmptyPackets">
            <summary>
            Sends an empty packet to all media components.
            When an EOF/EOS situation is encountered, this forces
            the decoders to enter drainig mode untill all frames are decoded.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.ClearPacketQueues">
            <summary>
            Clears the packet queues for all components.
            Additionally it flushes the codec buffered packets.
            This is useful after a seek operation is performed or a stream
            index is changed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleBlock">
            <summary>
            A subtitle frame container. Simply contains text lines.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleBlock.Text">
            <summary>
            Gets the lines of text for this subtitle frame with all formatting stripped out.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleBlock.OriginalText">
            <summary>
            Gets the original text in SRT or ASS fromat.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleBlock.OriginalTextType">
            <summary>
            Gets the type of the original text.
            Returns None when it's a bitmap or when it's None
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleFrame">
            <summary>
            Represents a wrapper for an unmanaged Subtitle frame.
            TODO: Only text (ASS and SRT) subtitles are supported currently.
            There is no support to bitmap subtitles.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.#ctor(FFmpeg.AutoGen.AVSubtitle*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Text">
            <summary>
            Gets lines of text that the subtitle frame contains.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.TextType">
            <summary>
            Gets the type of the text.
            </summary>
            <value>
            The type of the text.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged subtitle struct
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.AllocateSubtitle">
            <summary>
            Allocates an AVSubtitle struct in unmanaged memory,
            </summary>
            <returns>The subtitle struct pointer</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.DeallocateSubtitle(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Deallocates the subtitle struct used to create in managed memory.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoBlock">
            <summary>
            A pre-allocated, scaled video block. The buffer is in BGR, 24-bit format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoBlock.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.VideoBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.Buffer">
            <summary>
            Gets a pointer to the first byte of the data buffer.
            The format is 24bit BGR
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.BufferLength">
            <summary>
            Gets the length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.BufferStride">
            <summary>
            The picture buffer stride. 
            Pixel Width * 24-bit color (3 byes) + alignment (typically 0 for modern hw).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.PixelWidth">
            <summary>
            Gets the number of horizontal pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.PixelHeight">
            <summary>
            Gets the number of vertical pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.AspectWidth">
            <summary>
            Gets or sets the width of the aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.AspectHeight">
            <summary>
            Gets or sets the height of the aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.SmtpeTimecode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the 
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.PictureBufferLength">
            <summary>
            The picture buffer length of the last allocated buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoBlock.PictureBuffer">
            <summary>
            Holds a reference to the last allocated buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoBlock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoBlock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoFrame">
            <summary>
            Represents a wrapper for an unmanaged ffmpeg video frame.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.VideoFrame"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.ClosedCaptions">
            <summary>
            Gets the closed caption data collected from the frame in CEA-708/EAS-608 format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the 
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.SmtpeTimecode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaContainer">
            <summary>
            A container capable of opening an input url,
            reading packets from it, decoding frames, seeking, and pausing and resuming network streams
            Code heavily based on https://raw.githubusercontent.com/FFmpeg/FFmpeg/release/3.2/ffplay.c
            The method pipeline should be: 
            1. Set Options (or don't, for automatic options) and Initialize, 
            2. Perform continuous Reads, 
            3. Perform continuous Decodes and Converts/Materialize
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.InputContext">
            <summary>
            Holds a reference to an input context.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ReadSyncRoot">
            <summary>
            The read synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.DecodeSyncRoot">
            <summary>
            The decode synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ConvertSyncRoot">
            <summary>
            The convert synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.m_Components">
            <summary>
            Holds the set of components.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.IsDisposed">
            <summary>
            To detect redundat Dispose calls
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.MediaSeeksByBytes">
            <summary>
            Determines if the stream seeks by bytes always
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.m_RequiresPictureAttachments">
            <summary>
            Hold the value for the internal property with the same name.
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptCallback">
            <summary>
            The stream read interrupt callback.
            Used to detect read rimeouts.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptStartTime">
            <summary>
            The stream read interrupt start time.
            When a read operation is started, this is set to the ticks of UTC now.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.#ctor(System.String,Unosquare.FFME.Core.IMediaLogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaContainer" /> class.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <param name="logger">The logger.</param>
            <param name="protocolPrefix">
            The protocol prefix. See https://ffmpeg.org/ffmpeg-protocols.html 
            Leave null if setting it is not intended.</param>
            <exception cref="T:System.ArgumentNullException">mediaUrl</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Decoding.MediaContainer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaUrl">
            <summary>
            Gets the media URL. This is the input url, file or device that is read
            by this container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.ProtocolPrefix">
            <summary>
            Gets the protocol prefix.
            Typically async for local files and empty for other types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaOptions">
            <summary>
            The media initialization options.
            Options are applied when calling the Initialize method.
            After initialization, changing the options has no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaInfo">
            <summary>
            Provides stream, chapter and program info held by this container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaFormatName">
            <summary>
            Gets the name of the media format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaBitrate">
            <summary>
            Gets the media bitrate (bits per second). Returns 0 if not available.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Metadata">
            <summary>
            Holds the metadata of the media file when the stream is initialized.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsInitialized">
            <summary>
            Gets a value indicating whether an Input Context has been initialize.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaDuration">
            <summary>
            Gets the duration of the media.
            If this information is not available (i.e. realtime media) it will
            be set to TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsAtEndOfStream">
            <summary>
            Will be set to true whenever an End Of File situation is reached.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StreamPosition">
            <summary>
            Gets the byte position at which the stream is being read.
            Please note that this property gets updated after every Read.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsStreamSeekable">
            <summary>
            Gets a value indicating whether the underlying media is seekable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsStreamRealtime">
            <summary>
            Gets a value indicating whether this container represents realtime media.
            If the format name is rtp, rtsp, or sdp or if the url starts with udp: or rtp:
            then this property will be set to true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Components">
            <summary>
            Provides direct access to the individual Media components of the input stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaStartTimeOffset">
            <summary>
            Gets the media start time by which all component streams are offset. 
            Typically 0 but it could be something other than 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.SeekStartTimestamp">
            <summary>
            Gets the seek start timestamp.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StreamLastReadTimeUtc">
            <summary>
            Gets the time the last packet was read from the input
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.CanReadSuspend">
            <summary>
            For RTSP and other realtime streams reads can be suspended.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsReadSuspended">
            <summary>
            For RTSP and other realtime streams reads can be suspended.
            This property will return true if reads have been suspended.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.RequiresReadDelay">
            <summary>
            Gets a value indicating whether a packet read delay witll be enforced.
            RSTP formats or MMSH Urls will have this property set to true.
            Reading packets will block for at most 10 milliseconds depending on the last read time.
            This is a hack according to the source code in ffplay.c
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.RequiresPictureAttachments">
            <summary>
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking. This property is not part of the public API
            and is meant more for internal purposes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Open">
            <summary>
            Opens the individual stram components on the existing input context in order to start reading packets.
            Any Media Options must be set before this method is called.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified position in the stream. This method attempts to do so as
            precisely as possible, returning decoded frames of all available media type components
            just before or right on the requested position. The position must be given in 0-based time,
            so it converts component stream start time offset to absolute, 0-based time.
            Pass TimeSpan.Zero to seek to the beginning of the stream.
            </summary>
            <param name="position">The position.</param>
            <returns>The list of media frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Read">
            <summary>
            Reads the next available packet, sending the packet to the corresponding
            internal media component. It also sets IsAtEndOfStream property.
            Returns the media type if the packet was accepted by any of the media components.
            Returns None if the packet was not accepted by any of the media components
            or if reading failed (i.e. End of stream already or read error).
            Packets are queued internally. To dequeue them you need to call the receive frames
            method of each component until the packet buffer count becomes 0.
            </summary>
            <returns>The media type of the packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.MediaContainerException">When a read error occurs</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Decode">
            <summary>
            Decodes the next available packet in the packet queue for each of the components.
            Returns the list of decoded frames. You can call this method until the Components.PacketBufferCount
            becomes 0; The list of 0 or more decoded frames is returned in ascending StartTime order.
            A Packet may contain 0 or more frames. Once the frame source objects are returned, you
            are responsible for calling the Dispose method on them to free the underlying FFmpeg frame.
            Note that even after releasing them you can still use the managed properties.
            If you intend on Converting the frames to usable media frames (with Convert) you must not
            release the frame. Specify the release input argument as true and the frame will be automatically
            freed from memory.
            </summary>
            <returns>The list of media frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Convert(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaBlock},System.Boolean)">
            <summary>
            Performs audio, video and subtitle conversions on the decoded input frame so data
            can be used as a Frame. Please note that if the output is passed as a reference.
            This works as follows: if the output reference is null it will be automatically instantiated
            and returned by this function. This enables to  either instantiate or reuse a previously allocated Frame.
            This is important because buffer allocations are exepnsive operations and this allows you
            to perform the allocation once and continue reusing thae same buffer.
            </summary>
            <param name="input">The raw frame source. Has to be compatiable with the target. (e.g. use VideoFrameSource to conver to VideoFrame)</param>
            <param name="output">The target frame. Has to be compatible with the source.</param>
            <param name="siblings">The siblings that may help guess additional output parameters.</param>
            <param name="releaseInput">if set to <c>true</c> releases the raw frame source from unmanaged memory.</param>
            <returns>
            The media block
            </returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.MediaContainerException">MediaType</exception>
            <exception cref="T:System.ArgumentNullException">input</exception>
            <exception cref="T:System.ArgumentException">input
            or
            input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Close">
            <summary>
            Closes the input context immediately releasing all resources.
            This method is equivalent to calling the dispose method.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamInitialize">
            <summary>
            Initializes the input context to start read operations.
            This does NOT create the stream components and therefore, there needs to be a call
            to the Open method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The input context has already been initialized.</exception>
            <exception cref="T:Unosquare.FFME.MediaContainerException">When an error initializing the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamOpen">
            <summary>
            Opens the individual stream components to start reading packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamCreateComponents">
            <summary>
            Creates the stream components by first finding the best available streams.
            Then it initializes the components of the correct type each.
            </summary>
            <exception cref="T:Unosquare.FFME.MediaContainerException">The exception ifnromation</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterrupt(System.Void*)">
            <summary>
            The interrupt callback to handle stream reading timeouts
            </summary>
            <param name="opaque">A pointer to the format input context</param>
            <returns>0 for OK, 1 for error (timeout)</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamRead">
            <summary>
            Reads the next packet in the underlying stream and enqueues in the corresponding media component.
            Returns None of no packet was read.
            </summary>
            <returns>The type of media packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">Initialize</exception>
            <exception cref="T:Unosquare.FFME.MediaContainerException">Raised when an error reading from the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamReadSuspend">
            <summary>
            Suspends / pauses network streams
            This should only be called upon Dispose
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamReadResume">
            <summary>
            Resumes the reads of network streams
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.DropSeekFrames(System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaFrame},System.TimeSpan)">
            <summary>
            Drops the seek frames that are no longer needed.
            Target time should be provided in absolute, 0-based time
            </summary>
            <param name="frames">The frames.</param>
            <param name="targetTime">The target time.</param>
            <returns>The number of dropped frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekToStart">
            <summary>
            Seeks to the position at the start of the stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeek(System.TimeSpan)">
            <summary>
            Seeks to the exact or prior frame of the main stream.
            Supports byte seeking.
            </summary>
            <param name="targetTime">The target time.</param>
            <returns>The list of media frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekDecode(System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaFrame},System.TimeSpan,Unosquare.FFME.Decoding.SeekRequirement)">
            <summary>
            Reads and decodes packets untill the required media components have frames on or right before the target time.
            </summary>
            <param name="result">The list of frames that is currently being processed. Frames will be added here.</param>
            <param name="targetTime">The target time in absolute 0-based time.</param>
            <param name="requirement">The requirement.</param>
            <returns>The number of decoded frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.PacketQueue">
            <summary>
            A data structure containing a quque of packets to process.
            This class is thread safe and disposable.
            Enqueued, unmanaged packets are disposed automatically by this queue.
            Dequeued packets are the responsibility of the calling code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Count">
            <summary>
            Gets the packet count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.BufferLength">
            <summary>
            Gets the sum of all the packet sizes contained
            by this queue.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Duration">
            <summary>
            Gets the total duration in stream TimeBase units.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:FFmpeg.AutoGen.AVPacket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:FFmpeg.AutoGen.AVPacket"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The packet reference</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Peek">
            <summary>
            Peeks the next available packet in the queue without removing it.
            If no packets are available, null is returned.
            </summary>
            <returns>The packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Push(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Pushes the specified packet into the queue.
            In other words, enqueues the packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dequeue">
            <summary>
            Dequeues a packet from this queue.
            </summary>
            <returns>The dequeued packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Clear">
            <summary>
            Clears and frees all the unmanaged packets from this queue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleComponent">
            <summary>
            Performs subtitle stream extraction, decoding and text conversion.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The sibling blocks that may help guess some additional parameters for the input frame.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input cannot be null</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.CreateFrameSource(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            Creates a frame source object given the raw FFmpeg subtitle reference.
            </summary>
            <param name="frame">The raw FFmpeg subtitle pointer.</param>
            <returns>The managed frame</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoComponent">
            <summary>
            Performs video picture decoding, scaling and extraction logic.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.VideoComponent.OutputPixelFormat">
            <summary>
            The output pixel format of the scaler: 24-bit BGR
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.VideoComponent.Scaler">
            <summary>
            Holds a reference to the video scaler
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.ScalerFlags">
            <summary>
            Gets the video scaler flags used to perfom colorspace conversion (if needed).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.BaseFrameRate">
            <summary>
            Gets the base frame rate as reported by the stream component.
            All discrete timestamps can be represented in this framerate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.CurrentFrameRate">
            <summary>
            Gets the current frame rate as guessed by the last processed frame.
            Variable framerate might report different values at different times.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameWidth">
            <summary>
            Gets the width of the picture frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameHeight">
            <summary>
            Gets the height of the picture frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaBlock@,System.Collections.Generic.List{Unosquare.FFME.Decoding.MediaBlock})">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="siblings">The siblings to help guess additional frame parameters.</param>
            <returns>
            Return the updated output frame
            </returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.CreateFrameSource(FFmpeg.AutoGen.AVFrame*@)">
            <summary>
            Creates a frame source object given the raw FFmpeg frame reference.
            </summary>
            <param name="frame">The raw FFmpeg frame pointer.</param>
            <returns>Create a managed fraome from an unmanaged one.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.NormalizePixelFormat(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Gets the pixel format replacing deprecated pixel formats.
            AV_PIX_FMT_YUVJ
            </summary>
            <param name="frame">The frame.</param>
            <returns>A normalized pixel format</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the video filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filtergraph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.DestroyFiltergraph">
            <summary>
            Destroys the filtergraph releasing unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaElement">
            <summary>
            Represents a control that contains audio and/or video.
            In contrast with System.Windows.Controls.MediaElement, this version uses
            the FFmpeg library to perform reading and decoding of media streams.
            </summary>
            <seealso cref="T:System.Windows.Controls.UserControl" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.Windows.Markup.IUriContext" />
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingVideo">
            <summary>
            Occurs right before the video is presented on the screen.
            You can update the pizels on the bitmap before it is rendered on the screen.
            Or you could take a screenshot.
            Ensure you handle this very quickly as it runs on the UI thread.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingAudio">
            <summary>
            Occurs right before the audio is added to the audio buffer.
            You can update the bytes before they are enqueued.
            Ensure you handle this quickly before you get choppy audio.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingSubtitles">
            <summary>
            Occurs right before the subtitles are rendered.
            You can update the text.
            Ensure you handle this quickly before you get choppy subtitles.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingVideoEvent(System.Windows.Media.Imaging.WriteableBitmap,Unosquare.FFME.StreamInfo,System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Raises the rendering video event.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="stream">The stream.</param>
            <param name="smtpeTimecode">The smtpe timecode.</param>
            <param name="pictureNumber">The picture number.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingAudioEvent(Unosquare.FFME.Decoding.AudioBlock,System.TimeSpan)">
            <summary>
            Raises the rendering audio event.
            </summary>
            <param name="audioBlock">The audio block.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingSubtitlesEvent(Unosquare.FFME.Decoding.SubtitleBlock,System.TimeSpan)">
            <summary>
            Raises the rendering subtitles event.
            </summary>
            <param name="block">The block.</param>
            <param name="clock">The clock.</param>
            <returns>True if the rendering should be prevented</returns>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.TimerIntervalMilliseconds">
            <summary>
            This partial class implements: 
            1. Packet reading from the Container
            2. Frame Decoding from packet buffer and Block buffering
            3. Block Rendering from block buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.PacketReadingCycle">
            <summary>
            Gets the packet reading cycle control evenet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FrameDecodingCycle">
            <summary>
            Gets the frame decoding cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.BlockRenderingCycle">
            <summary>
            Gets the block rendering cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.SeekingDone">
            <summary>
            Gets the seeking done control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsTaskCancellationPending">
            <summary>
            Gets or sets a value indicating whether the workedrs have been requested
            an exit.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasDecoderSeeked">
            <summary>
            Gets or sets a value indicating whether the decoder has moved its byte position
            to something other than the normal continuous reads in the last read cycle.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Blocks">
            <summary>
            Holds the blocks
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Renderers">
            <summary>
            Holds the block renderers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.LastRenderTime">
            <summary>
            Holds the last rendered StartTime for each of the media block types
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.CanReadMorePackets">
            <summary>
            Gets a value indicating whether more packets can be read from the stream.
            This does not check if the packet queue is full.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.CanReadMoreFrames">
            <summary>
            Gets a value indicating whether more frames can be decoded from the packet queue.
            That is, if we have packets in the packet buffer or if we are not at the end of the stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RunPacketReadingWorker">
            <summary>
            Runs the read task which keeps a packet buffer as full as possible.
            It reports on DownloadProgress by enqueueing an update to the property
            in order to avoid any kind of disruption to this thread caused by the UI thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RunFrameDecodingWorker">
            <summary>
            Continually decodes the available packet buffer to have as
            many frames as possible in each frame queue and
            up to the MaxFrames on each component
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RunBlockRenderingWorker">
            <summary>
            Continuously converts frmes and places them on the corresponding
            block buffer. This task is responsible for keeping track of the clock
            and calling the render methods appropriate for the current clock position.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.SnapVideoPosition(System.TimeSpan)">
            <summary>
            Sets the clock to a discrete video position if possible
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.CanReadMoreFramesOf(Unosquare.FFME.Core.MediaType)">
            <summary>
            Gets a value indicating whether more frames can be converted into blocks of the given type.
            </summary>
            <param name="t">The t.</param>
            <returns>
              <c>true</c> if this instance [can read more frames of] the specified t; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.SendBlockToRenderer(Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan)">
            <summary>
            Sends the given block to its corresponding media renderer.
            </summary>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <returns>The number of blocks sent to the renderer</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.AddBlocks(Unosquare.FFME.Core.MediaType)">
            <summary>
            Adds the blocks of the given media type.
            </summary>
            <param name="t">The t.</param>
            <returns>The number of blocks that were added</returns>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.Commands">
            <summary>
            The command queue to be executed in the order they were sent.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.Clock">
            <summary>
            Represents a real-time time measuring device.
            Rendering media should occur as requested by the clock.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.Container">
            <summary>
            The underlying media container that provides access to 
            individual media component streams
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Play">
            <summary>
            Begins or resumes playback of the currently loaded media.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Pause">
            <summary>
            Pauses playback of the currently loaded media.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Stop">
            <summary>
            Pauses and rewinds the currently loaded media.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Close">
            <summary>
            Closes the currently loaded media.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.ViewBox">
            <summary>
            This is the image that will display the video from a Writeable Bitmap
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.m_FFmpegDirectory">
            <summary>
            The ffmpeg directory
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.m_BaseUri">
            <summary>
            IUriContext BaseUri backing
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.UIPropertyUpdateTimer">
            <summary>
            The position update timer
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.m_IsPositionUpdating">
            <summary>
            When position is being set from within this control, this field will
            be set to true. This is useful to detect if the user is setting the position
            or if the Position property is being driven from within
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.m_IsDisposing">
            <summary>
            Flag when disposing process start but not finished yet
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.MediaElement"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaElement" /> class.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.FFmpegMessageLogged">
            <summary>
            Occurs when a logging message from the FFmpeg library has been received.
            This is shared across all instances of Media Elements
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.PropertyChanged">
            <summary>
            Multicast event for property change notifications.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MessageLogged">
            <summary>
            Occurs when a logging message has been logged.
            This does not include FFmpeg messages.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FFmpegDirectory">
            <summary>
            Gets or sets the FFmpeg path from which to load the FFmpeg binaries.
            You must set this path before setting the Source property for the first time on any instance of this control.
            Settng this property when FFmpeg binaries have been registered will throw an exception.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment characteristics applied to this element when it is 
            composed within a parent element, such as a panel or items control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.System#Windows#Markup#IUriContext#BaseUri">
            <summary>
            Gets or sets the base URI of the current application context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsPositionUpdating">
            <summary>
            When position is being set from within this control, this field will
            be set to true. This is useful to detect if the user is setting the position
            or if the Position property is being driven from within
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.ContentGrid">
            <summary>
            Gets the grid control holding the rest of the controls.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseFFmpegMessageLogged(Unosquare.FFME.MediaLogMessagEventArgs)">
            <summary>
            Raises the FFmpegMessageLogged event
            </summary>
            <param name="eventArgs">The <see cref="T:Unosquare.FFME.MediaLogMessagEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.UpdatePosition(System.TimeSpan)">
            <summary>
            Updates the position property signaling the update is
            coming internally. This is to distinguish between user/binding 
            written value to the Position Porperty and value set by this control's
            internal clock.
            </summary>
            <param name="value">The current position.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMessageLogged(Unosquare.FFME.MediaLogMessagEventArgs)">
            <summary>
            Raises the MessageLogged event
            </summary>
            <param name="eventArgs">The <see cref="T:Unosquare.FFME.MediaLogMessagEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SourceProperty">
            <summary>
            DependencyProperty for FFmpegMediaElement Source property. 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.StretchProperty">
            <summary>
            DependencyProperty for Stretch property. 
            </summary> 
        </member>
        <member name="F:Unosquare.FFME.MediaElement.StretchDirectionProperty">
            <summary> 
            DependencyProperty for StretchDirection property.
            </summary> 
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BalanceProperty">
            <summary>
            The DependencyProperty for the MediaElement.Balance property. 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.IsMutedProperty">
            <summary> 
            The DependencyProperty for the MediaElement.IsMuted property.
            </summary> 
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SpeedRatioProperty">
            <summary>
            The DependencyProperty for the MediaElement.SpeedRatio property. 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.VolumeProperty">
            <summary> 
            The DependencyProperty for the MediaElement.Volume property.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.ScrubbingEnabledProperty">
            <summary>
            The DependencyProperty for the MediaElement.ScrubbingEnabled property.
            </summary> 
        </member>
        <member name="F:Unosquare.FFME.MediaElement.UnloadedBehaviorProperty">
            <summary> 
            The DependencyProperty for the MediaElement.UnloadedBehavior property. 
            TODO: Currently this property has no effect. Needs implementation.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.LoadedBehaviorProperty">
            <summary>
            The DependencyProperty for the MediaElement.LoadedBehavior property.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.PositionProperty">
            <summary>
            The DependencyProperty for the MediaElement.Position property. 
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Source">
            <summary>
            Gets/Sets the Source on this MediaElement. 
            The Source property is the Uri of the media to be played.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Stretch">
            <summary>
            Gets/Sets the Stretch on this MediaElement.
            The Stretch property determines how large the MediaElement will be drawn. 
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.StretchDirection">
            <summary> 
            Gets/Sets the stretch direction of the Viewbox, which determines the restrictions on
            scaling that are applied to the content inside the Viewbox.  For instance, this property 
            can be used to prevent the content from being smaller than its native size or larger than 
            its native size.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.LoadedBehavior">
            <summary>
            Specifies the behavior that the media element should have when it 
            is loaded. The default behavior is that it is under manual control 
            (i.e. the caller should call methods such as Play in order to play
            the media). If a source is set, then the default behavior changes to 
            to be playing the media. If a source is set and a loaded behavior is
            also set, then the loaded behavior takes control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.SpeedRatio">
            <summary>
            Gets/Sets the SpeedRatio property on the MediaElement. 
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.UnloadedBehavior">
            <summary>
            Specifies how the underlying media should behave when 
            it has ended. The default behavior is to Close the media.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Volume">
            <summary>
            Gets/Sets the Volume property on the MediaElement.
            Note: Valid values are from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Balance">
            <summary>
            Gets/Sets the Balance property on the MediaElement. 
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsMuted">
            <summary>
            Gets/Sets the IsMuted property on the MediaElement.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.ScrubbingEnabled">
            <summary>
            Gets or sets a value that indicates whether the MediaElement will update frames 
            for seek operations while paused. This is a dependency property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Position">
            <summary>
            Gets/Sets the Position property on the MediaElement. 
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Metadata">
            <summary>
            Provides key-value pairs of the metadata contained in the media.
            Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaFormat">
            <summary>
            Gets the media format. Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FrameStepDuration">
            <summary>
            Gets the duration of a single frame step.
            If there is a video component with a framerate, this propery returns the length of a frame.
            If there is no video component it simply returns a tenth of a second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasAudio">
            <summary> 
            Returns whether the given media has audio. 
            Only valid after the MediaOpened event has fired.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasVideo">
            <summary> 
            Returns whether the given media has video. Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoCodec">
            <summary>
            Gets the video codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoBitrate">
            <summary>
            Gets the video bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalVideoWidth">
            <summary>
            Returns the natural width of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary> 
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalVideoHeight">
            <summary> 
            Returns the natural height of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoFrameRate">
            <summary>
            Gets the video frame rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoFrameLength">
            <summary>
            Gets the duration in seconds of the video frame.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoHardwareDecoder">
            <summary>
            Gets the name of the video hardware decoder in use.
            Enabling hardware acceleration does not guarantee decoding will be performed in hardware.
            When hardware decoding of frames is in use this will return the name of the HW accelerator.
            Otherwise it will return an empty string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioCodec">
            <summary>
            Gets the audio codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioBitrate">
            <summary>
            Gets the audio bitrate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioChannels">
            <summary>
            Gets the audio channels count.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioBitsPerSample">
            <summary>
            Gets the audio bits per sample.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalDuration">
            <summary>
            Gets the Media's natural duration
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.CanPause">
            <summary>
            Returns whether the currently loaded media can be paused.
            This is only valid after the MediaOpened event has fired.
            Note that this property is computed based on wether the stream is detected to be a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsLiveStream">
            <summary>
            Returns whether the currently loaded media is live or realtime
            This is only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsSeekable">
            <summary>
            Gets a value indicating whether the currently loaded media can be seeked.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsPlaying">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasMediaEnded">
            <summary>
            Gets a value indicating whether the media has reached its end.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsBuffering">
            <summary>
            Get a value indicating whether the media is buffering.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsSeeking">
            <summary>
            Gets a value indicating whether the media seeking is in progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoSmtpeTimecode">
            <summary>
            Returns the current video SMTPE timecode if available.
            If not available, this property returns an empty string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.BufferingProgress">
            <summary>
            Gets a value that indicates the percentage of buffering progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.BufferCacheLength">
            <summary>
            The wait packet buffer length.
            It is adjusted to 1 second if bitrate information is available.
            Otherwise, it's simply 512KB
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.DownloadProgress">
            <summary>
            Gets a value that indicates the percentage of download progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.DownloadCacheLength">
            <summary>
            Gets the maximum packet buffer length, according to the bitrate (if available).
            If it's a realtime stream it will return 30 times the buffer cache length.
            Otherwise, it will return  4 times of the buffer cache length.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsOpening">
            <summary>
            Gets a value indicating whether the media is in the process of opening.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsOpen">
            <summary>
            Gets a value indicating whether this media element
            currently has an open media url.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaState">
            <summary>
            Gets the current playback state.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.UpdateMetadaProperty">
            <summary>
            Updates the metada property.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.NotifyPropertyChanges">
            <summary>
            Updates the media properties notifying that there are new values to be read from all of them.
            Call this method only when necessary because it creates a lot of events.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.ResetDependencyProperies">
            <summary>
            Resets the dependency properies.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BufferingStartedEvent">
            <summary>
            BufferingStarted is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BufferingEndedEvent">
            <summary>
            BufferingEnded is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SeekingStartedEvent">
            <summary>
            SeekingStarted is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SeekingEndedEvent">
            <summary>
            SeekingEnded is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaFailedEvent">
            <summary>
            MediaFailedEvent is a routed event. 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaOpenedEvent">
            <summary> 
            MediaOpened is a routed event.
            </summary> 
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaOpeningEvent">
            <summary>
            MediaOpeningEvent is a routed event. 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaEndedEvent">
            <summary>
            MediaEnded is a routed event 
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.BufferingStarted">
            <summary>
            Occurs when buffering of packets was started
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.BufferingEnded">
            <summary>
            Occurs when buffering of packets was Ended
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.SeekingStarted">
            <summary>
            Occurs when Seeking of packets was started
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.SeekingEnded">
            <summary>
            Occurs when Seeking of packets was Ended
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaFailed">
            <summary>
            Raised when the media fails to load or a fatal error has occurred which prevents playback.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaOpened">
            <summary>
            Raised when the media is opened 
            </summary> 
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaOpening">
            <summary>
            Raised before the input stream of the media is opened.
            Use this method to modify the input options.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaEnded">
            <summary> 
            Raised when the corresponding media ends.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaFailedEvent(System.Exception)">
            <summary>
            Raises the media failed event.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaOpenedEvent">
            <summary>
            Raises the media opened event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaOpeningEvent">
            <summary>
            Raises the media opening event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.CreateExceptionRoutedEventArgs(System.Windows.RoutedEvent,System.Object,System.Exception)">
            <summary>
            Creates a new instance of exception routed event arguments.
            This method exists because the constructor has not been made public for that class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="sender">The sender.</param>
            <param name="errorException">The error exception.</param>
            <returns>The event arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.LogEventStart(System.Windows.RoutedEvent)">
            <summary>
            Logs the start of an event
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.LogEventDone(System.Windows.RoutedEvent)">
            <summary>
            Logs the end of an event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseBufferingStartedEvent">
            <summary>
            Raises the buffering started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseBufferingEndedEvent">
            <summary>
            Raises the buffering ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseSeekingStartedEvent">
            <summary>
            Raises the Seeking started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseSeekingEndedEvent">
            <summary>
            Raises the Seeking ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaEndedEvent">
            <summary>
            Raises the media ended event.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.RenderingEventArgs">
            <summary>
            A base class to represent media block
            rendering event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.RenderingEventArgs.#ctor(Unosquare.FFME.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.RenderingEventArgs" /> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="startTime">The position.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.RenderingEventArgs.Stream">
            <summary>
            Provides Stream Information coming from the media container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingEventArgs.Clock">
            <summary>
            Gets the clock position at which the media
            was called for rendering
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingEventArgs.StartTime">
            <summary>
            Gets the starting time at which this media
            has to be presented.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingEventArgs.Duration">
            <summary>
            Gets how long this media has to be presented.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.RenderingAudioEventArgs">
            <summary>
            Provides the audio samples rendering payload as event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.RenderingAudioEventArgs.#ctor(System.IntPtr,System.Int32,Unosquare.FFME.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.RenderingAudioEventArgs" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.Buffer">
            <summary>
            Gets a pointer to the samples buffer.
            Samples are provided in PCM 16-bit signed, interleaved stereo.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.BufferLength">
            <summary>
            Gets the length in bytes of the samples buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.SampleRate">
            <summary>
            Gets the number of samples in 1 second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.ChannelCount">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.BitsPerSample">
            <summary>
            Gets the number of bits per sample.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.Samples">
            <summary>
            Gets the number of samples in the buffer for all channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingAudioEventArgs.SamplesPerChannel">
            <summary>
            Gets the number of samples in the buffer per channel.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.RenderingSubtitlesEventArgs">
            <summary>
            Provides the subtitles rendering payload as event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.RenderingSubtitlesEventArgs.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},FFmpeg.AutoGen.AVSubtitleType,Unosquare.FFME.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.RenderingSubtitlesEventArgs" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="originalText">The original text.</param>
            <param name="format">The format.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.RenderingSubtitlesEventArgs.Text">
            <summary>
            Gets the text stripped out of ASS or SRT formatting.
            This is what the default subtitle renderer will display
            on the screen.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingSubtitlesEventArgs.OriginalText">
            <summary>
            Gets the text as originally decoded including
            all markup and formatting.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingSubtitlesEventArgs.Format">
            <summary>
            Gets the type of subtitle format the original
            subtitle text is in.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingSubtitlesEventArgs.Cancel">
            <summary>
            When set to true, clears the current subtitle and 
            prevents the subtitle block from being rendered.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.RenderingVideoEventArgs">
            <summary>
            The video rendering event arguments
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.RenderingVideoEventArgs.#ctor(System.Windows.Media.Imaging.WriteableBitmap,Unosquare.FFME.StreamInfo,System.String,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.RenderingVideoEventArgs" /> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="stream">The stream.</param>
            <param name="smtpeTimecode">The smtpe timecode.</param>
            <param name="pictureNumber">The picture number.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.RenderingVideoEventArgs.Bitmap">
            <summary>
            Gets the writable bitmap filled with the video frame pixels.
            Feel free to capture or change this image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingVideoEventArgs.PictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the 
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.RenderingVideoEventArgs.SmtpeTimecode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaInfo">
            <summary>
            Holds media information about the input, its chapters, programs and individual stream components
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaInfo.#ctor(Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaInfo"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.InputUrl">
            <summary>
            Gets the input URL string used to access and create the media container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Format">
            <summary>
            Gets the name of the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Metadata">
            <summary>
            Gets the metadata for the input. This may include stuff like title, creation date, company name, etc.
            Individual stream components may contain additional metadata.
            The metadata 
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Duration">
            <summary>
            Gets the duration of the input as reported by the container format.
            Individual stream components may have different values
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.StartTime">
            <summary>
            Gets the start timestamp of the input as reported by the container format.
            Individual stream components may have different values
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.BitRate">
            <summary>
            If available, returns a non-zero value as reported by the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Chapters">
            <summary>
            Gets a list of chapters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Programs">
            <summary>
            Gets a list of programs with their associated streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.Streams">
            <summary>
            Gets the dictionary of stream information components by stream index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaInfo.BestStreams">
            <summary>
            Provides access to the best streams of each media type found in the container.
            This uses some internal FFmpeg heuristics.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaInfo.ExtractStreams(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the stream infos from the input.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The list of stream infos</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaInfo.FindBestStreams(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.StreamInfo})">
            <summary>
            Finds the best streams for audio video, and subtitles.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The star infos</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaInfo.ExtractChapters(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the chapters from the input.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The chapters</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaInfo.ExtractPrograms(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.StreamInfo})">
            <summary>
            Extracts the programs from the input and creates associations between programs and streams.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The program information</returns>
        </member>
        <member name="T:Unosquare.FFME.StreamInfo">
            <summary>
            Represents media stream information
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.StreamId">
            <summary>
            Gets the stream identifier. This is different from the stream index.
            Typically this value is not very useful.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.StreamIndex">
            <summary>
            Gets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.CodecType">
            <summary>
            Gets the type of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.CodecTypeName">
            <summary>
            Gets the name of the codec type. Audio, Video, Subtitle, Data, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.Codec">
            <summary>
            Gets the codec identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.CodecName">
            <summary>
            Gets the name of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.CodecProfile">
            <summary>
            Gets the codec profile. Only valid for H.264 or 
            video codecs that use profiles. Otherwise empty.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.CodecTag">
            <summary>
            Gets the codec tag. Not very useful except for fixing bugs with
            some demuxer scenarios.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.HasClosedCaptions">
            <summary>
            Gets a value indicating whether this stream has closed captions.
            Typically this is set for video streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.IsLossless">
            <summary>
            Gets a value indicating whether this stream contains lossless compressed data.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.PixelFormat">
            <summary>
            Gets the pixel format. Only valid for Vide streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.PixelWidth">
            <summary>
            Gets the width of the video frames. 
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.PixelHeight">
            <summary>
            Gets the height of the video frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.FieldOrder">
            <summary>
            Gets the field order. This is useful to determine
            if the video needs deinterlacing
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.ColorRange">
            <summary>
            Gets the video color range.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.SampleFormat">
            <summary>
            Gets the audio sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.TimeBase">
            <summary>
            Gets the stream time base unit in seconds.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.SampleAspectRatio">
            <summary>
            Gets the sample aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.DisplayAspectRatio">
            <summary>
            Gets the display aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.BitRate">
            <summary>
            Gets the reported bit rate. 9 for unavalable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.MaxBitRate">
            <summary>
            Gets the maximum bit rate for variable bitrate streams. 0 if unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.InfoFrameCount">
            <summary>
            Gets the number of frames that were read to obtain the stream's information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.ReferenceFrameCount">
            <summary>
            Gets the number of reference frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.FPS">
            <summary>
            Gets the average FPS reported by the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.TBR">
            <summary>
            Gets the real (base) framerate of the stream
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.TBN">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream, according to the stream data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.TBC">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream ,accoring to the codec
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.Disposition">
            <summary>
            Gets the disposition flags.
            Please see ffmpeg.AV_DISPOSITION_* fields.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.Metadata">
            <summary>
            Gets the stream's metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.StreamInfo.Language">
            <summary>
            Gets the language string from the stream's metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ChapterInfo">
            <summary>
            Represents a chapter within a container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ChapterInfo.Index">
            <summary>
            Gets the chapter index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ChapterInfo.ChapterId">
            <summary>
            Gets the chapter identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ChapterInfo.StartTime">
            <summary>
            Gets the start time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ChapterInfo.EndTime">
            <summary>
            Gets the end time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ChapterInfo.Metadata">
            <summary>
            Gets the chapter metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ProgramInfo">
            <summary>
            Represents a program and its associated streams within a container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ProgramInfo.ProgramNumber">
            <summary>
            Gets the program number.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ProgramInfo.ProgramId">
            <summary>
            Gets the program identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ProgramInfo.Metadata">
            <summary>
            Gets the program metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ProgramInfo.Streams">
            <summary>
            Gets the associated program streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ProgramInfo.Name">
            <summary>
            Gets the name of the program. Empty if unavailable.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaLogMessagEventArgs">
            <summary>
            Represents the contents of alogging message that was sent to the log manager.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.MediaLogMessagEventArgs.#ctor(Unosquare.FFME.MediaElement,Unosquare.FFME.MediaLogMessageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaLogMessagEventArgs" /> class.
            </summary>
            <param name="mediaElement">The media element.</param>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Unosquare.FFME.MediaLogMessagEventArgs.Source">
            <summary>
            Gets the intance of the MediaElement that generated this message.
            When null, it means FFmpeg generated this message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaLogMessagEventArgs.TimestampUtc">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaLogMessagEventArgs.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaLogMessagEventArgs.Message">
            <summary>
            Gets the contents of the message.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.IWaveProvider">
            <summary>
            Generic interface for all WaveProviders.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWaveProvider.WaveFormat">
            <summary>
            Gets the WaveFormat of this WaveProvider.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill the specified buffer with wave data.
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>
            the number of bytes written to the buffer.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.MmResult">
            <summary>
            Windows multimedia error codes from mmsystem.h.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.NoError">
            <summary>no error, MMSYSERR_NOERROR</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.UnspecifiedError">
            <summary>unspecified error, MMSYSERR_ERROR</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.BadDeviceId">
            <summary>device ID out of range, MMSYSERR_BADDEVICEID</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.NotEnabled">
            <summary>driver failed enable, MMSYSERR_NOTENABLED</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.AlreadyAllocated">
            <summary>device already allocated, MMSYSERR_ALLOCATED</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.InvalidHandle">
            <summary>device handle is invalid, MMSYSERR_INVALHANDLE</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.NoDriver">
            <summary>no device driver present, MMSYSERR_NODRIVER</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.MemoryAllocationError">
            <summary>memory allocation error, MMSYSERR_NOMEM</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.NotSupported">
            <summary>function isn't supported, MMSYSERR_NOTSUPPORTED</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.BadErrorNumber">
            <summary>error value out of range, MMSYSERR_BADERRNUM</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.InvalidFlag">
            <summary>invalid flag passed, MMSYSERR_INVALFLAG</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.InvalidParameter">
            <summary>invalid parameter passed, MMSYSERR_INVALPARAM</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.HandleBusy">
            <summary>handle being used simultaneously on another thread (eg callback),MMSYSERR_HANDLEBUSY</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.InvalidAlias">
            <summary>specified alias not found, MMSYSERR_INVALIDALIAS</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.BadRegistryDatabase">
            <summary>bad registry database, MMSYSERR_BADDB</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.RegistryKeyNotFound">
            <summary>registry key not found, MMSYSERR_KEYNOTFOUND</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.RegistryReadError">
            <summary>registry read error, MMSYSERR_READERROR</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.RegistryWriteError">
            <summary>registry write error, MMSYSERR_WRITEERROR</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.RegistryDeleteError">
            <summary>registry delete error, MMSYSERR_DELETEERROR</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.RegistryValueNotFound">
            <summary>registry value not found, MMSYSERR_VALNOTFOUND</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.NoDriverCallback">
            <summary>driver does not call DriverCallback, MMSYSERR_NODRIVERCB</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.MoreData">
            <summary>more data to be returned, MMSYSERR_MOREDATA</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.WaveBadFormat">
            <summary>unsupported wave format, WAVERR_BADFORMAT</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.WaveStillPlaying">
            <summary>still something playing, WAVERR_STILLPLAYING</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.WaveHeaderUnprepared">
            <summary>header not prepared, WAVERR_UNPREPARED</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.WaveSync">
            <summary>device is synchronous, WAVERR_SYNC</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.AcmNotPossible">
            <summary>Conversion not possible (ACMERR_NOTPOSSIBLE)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.AcmBusy">
            <summary>Busy (ACMERR_BUSY)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.AcmHeaderUnprepared">
            <summary>Header Unprepared (ACMERR_UNPREPARED)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.AcmCancelled">
            <summary>Cancelled (ACMERR_CANCELED)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.MixerInvalidLine">
            <summary>invalid line (MIXERR_INVALLINE)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.MixerInvalidControl">
            <summary>invalid control (MIXERR_INVALCONTROL)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.MmResult.MixerInvalidValue">
            <summary>invalid value (MIXERR_INVALVALUE)</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.MmTime">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd757347(v=VS.85).aspx
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.PlaybackState">
            <summary>
            Enumerates the various wave output playback states
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.PlaybackState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.PlaybackState.Playing">
            <summary>
            Playing
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.PlaybackState.Paused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat">
            <summary>
            Supported wave formats for WaveOutCapabilities
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1M08">
            <summary>
            11.025 kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1S08">
            <summary>
            11.025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1M16">
            <summary>
            11.025 kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1S16">
            <summary>
            11.025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2M08">
            <summary>
            22.05  kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2S08">
            <summary>
            22.05  kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2M16">
            <summary>
            22.05  kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2S16">
            <summary>
            22.05  kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4S16">
            <summary>
             44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44M08">
            <summary>
            44.1   kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44S08">
            <summary>
            44.1   kHz, Stereo, 8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44S16">
            <summary>
            44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48M08">
            <summary>
            48     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48S08">
            <summary>
             48     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48M16">
            <summary>
            48     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48S16">
            <summary>
            48     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96M08">
            <summary>
            96     kHz, Mono,   8-bit 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96S08">
            <summary>
            96     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96M16">
            <summary>
            96     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96S16">
            <summary>
            96     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.formatTag">
            <summary>The format tag -- always 0x0001 PCM</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            PCM 48Khz stereo 16 bit signed, interleaved, 2-channel format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            </summary>
            <param name="rate">The rate.</param>
            <param name="bits">The bits.</param>
            <param name="channels">The channels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">channels - channels</exception>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>The size</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveHeader">
            <summary>
            WaveHeader interop structure (WAVEHDR)
            http://msdn.microsoft.com/en-us/library/dd743837%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.DataBuffer">
            <summary>pointer to locked data buffer (lpData)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.BufferLength">
            <summary>length of data buffer (dwBufferLength)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.BytesRecorded">
            <summary>used for input only (dwBytesRecorded)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.UserData">
            <summary>for client's use (dwUser)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Flags">
            <summary>assorted flags (dwFlags)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Loops">
            <summary>loop control counter (dwLoops)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Next">
            <summary>PWaveHdr, reserved for driver (lpNext)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Reserved">
            <summary>reserved for driver</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags">
            <summary>
            Wave Header Flags enumeration
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.BeginLoop">
            <summary>
            WHDR_BEGINLOOP
            This buffer is the first buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.Done">
            <summary>
            WHDR_DONE
            Set by the device driver to indicate that it is finished with the buffer and is returning it to the application.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.EndLoop">
            <summary>
            WHDR_ENDLOOP
            This buffer is the last buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.InQueue">
            <summary>
            WHDR_INQUEUE
            Set by Windows to indicate that the buffer is queued for playback.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.Prepared">
            <summary>
            WHDR_PREPARED
            Set by Windows to indicate that the buffer has been prepared with the waveInPrepareHeader or waveOutPrepareHeader function.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveInterop">
            <summary>
            MME Wave function interop
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackNull">
            <summary>
            CALLBACK_NULL
            No callback
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackFunction">
            <summary>
            CALLBACK_FUNCTION
            dwCallback is a FARPROC 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackEvent">
            <summary>
            CALLBACK_EVENT
            dwCallback is an EVENT handle 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackWindow">
            <summary>
            CALLBACK_WINDOW
            dwCallback is a HWND 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackThread">
            <summary>
            CALLBACK_THREAD
            callback is a thread ID 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInOpen">
            <summary>
            WIM_OPEN
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInClose">
            <summary>
            WIM_CLOSE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInData">
            <summary>
            WIM_DATA
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutClose">
            <summary>
            WOM_CLOSE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutDone">
            <summary>
            WOM_DONE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutOpen">
            <summary>
            WOM_OPEN
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.MmException">
            <summary>
            A wrapper class for MmException.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.MmException.#ctor(Unosquare.FFME.Rendering.Wave.MmResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.MmException"/> class.
            </summary>
            <param name="result">The result returned by the Windows API call</param>
            <param name="function">The name of the Windows API that failed</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.MmException.Result">
            <summary>
            Returns the Windows API result
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.MmException.Try(Unosquare.FFME.Rendering.Wave.MmResult,System.String)">
            <summary>
            Helper function to automatically raise an exception on failure
            </summary>
            <param name="result">The result of the API call</param>
            <param name="function">The API function name</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.MmException.ErrorMessage(Unosquare.FFME.Rendering.Wave.MmResult,System.String)">
            <summary>
            Creates an error message base don an erro result.
            </summary>
            <param name="result">The result.</param>
            <param name="function">The function.</param>
            <returns>A descriptive rror message</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveOutBuffer">
            <summary>
            A buffer of Wave samples for streaming to a Wave Output device
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.#ctor(System.IntPtr,System.Int32,Unosquare.FFME.Rendering.Wave.IWaveProvider,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveOutBuffer"/> class.
            </summary>
            <param name="hWaveOut">WaveOut device to write to</param>
            <param name="bufferSize">Buffer size in bytes</param>
            <param name="bufferFillStream">Stream to provide more data</param>
            <param name="waveOutLock">Lock to protect WaveOut API's from being called on &gt;1 thread</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveOutBuffer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.InQueue">
            <summary>
            Whether the header's in queue flag is set
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.BufferSize">
            <summary>
            The buffer size in bytes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.Dispose">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.OnDone">
            <summary>
            this is called by the Wave callback and should be used to refill the buffer.
            This calls the .Read method on the stream
            </summary>
            <returns>true when bytes were written. False if no bytes were written.</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by this WaveBuffer
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.WriteToWaveOut">
            <summary>
            Writes to wave out.
            </summary>
            <exception cref="T:Unosquare.FFME.Rendering.Wave.MmException">waveOutWrite</exception>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities">
            <summary>
            WaveOutCapabilities structure (based on WAVEOUTCAPS2 from mmsystem.h)
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/multimed/htm/_win32_waveoutcaps_str.asp
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.manufacturerId">
            <summary>
            wMid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.productId">
            <summary>
            wPid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.driverVersion">
            <summary>
            vDriverVersion
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.productName">
            <summary>
            Product Name (szPname)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.supportedFormats">
            <summary>
            Supported formats (bit flags) dwFormats 
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.channels">
            <summary>
            Supported channels (1 for mono 2 for stereo) (wChannels)
            Seems to be set to -1 on a lot of devices
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.reserved">
            <summary>
            wReserved1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.support">
            <summary>
            Optional functionality supported by the device
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.Channels">
            <summary>
            Number of channels supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsPlaybackRateControl">
            <summary>
            Whether playback rate control is supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsVolumeControl">
            <summary>
            Whether volume control is supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsChannelVolumeControl">
            <summary>
            Gets a value indicating whether this device supports independent channel volume control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsPitchControl">
            <summary>
            Gets a value indicating whether this device supports pitch control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsSampleAccuratePosition">
            <summary>
            Gets a value indicating whether the device returns sample-accurate position information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.IsSynchronousOutput">
            <summary>
            Gets a value indicating whether the driver is synchronous and will block while playing a buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.NameGuid">
            <summary>
            The device name Guid (if provided)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.ProductGuid">
            <summary>
            The product name Guid (if provided)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.ManufacturerGuid">
            <summary>
            The manufacturer guid (if provided)
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutCapabilities.SupportsWaveFormat(Unosquare.FFME.Rendering.Wave.SupportedWaveFormat)">
            <summary>
            Checks to see if a given SupportedWaveFormat is supported
            </summary>
            <param name="waveFormat">The SupportedWaveFormat</param>
            <returns>true if supported</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveOutSupport">
            <summary>
            Flags indicating what features this WaveOut device supports
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Pitch">
            <summary>supports pitch control (WAVECAPS_PITCH)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.PlaybackRate">
            <summary>supports playback rate control (WAVECAPS_PLAYBACKRATE)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Volume">
            <summary>supports volume control (WAVECAPS_VOLUME)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.LRVolume">
            <summary>supports separate left-right volume control (WAVECAPS_LRVOLUME)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Sync">
            <summary>(WAVECAPS_SYNC)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.SampleAccurate">
            <summary>(WAVECAPS_SAMPLEACCURATE)</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WavePlayer">
            <summary>
            A wave player that opens an audio device and continuously feeds it
            with audio samples using a wave provider.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.#ctor(Unosquare.FFME.Rendering.AudioRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WavePlayer" /> class.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WavePlayer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.DesiredLatency">
            <summary>
            Gets or sets the desired latency in milliseconds
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.NumberOfBuffers">
            <summary>
            Gets or sets the number of buffers used
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.DeviceNumber">
            <summary>
            Gets or sets the device number
            Should be set before a call to Init
            This must be between -1 and <see>DeviceCount</see> - 1.
            -1 means stick to default device even default device is changed
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.OutputWaveFormat">
            <summary>
            Gets a <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> instance indicating the format the hardware is using.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.PlaybackState">
            <summary>
            Playback State
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WavePlayer.Capabilities">
            <summary>
            Gets the capabilities.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Init(Unosquare.FFME.Rendering.Wave.IWaveProvider)">
            <summary>
            Initializes the specified wave provider.
            </summary>
            <param name="waveProvider">The wave provider.</param>
            <exception cref="T:System.InvalidOperationException">Can't re-initialize during playback</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Play">
            <summary>
            Start playing the audio from the WaveStream
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Pause">
            <summary>
            Pause the audio
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Stop">
            <summary>
            Stop and reset the WaveOut device
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.GetPosition">
            <summary>
            Gets the current position in bytes from the wave output device.
            (n.b. this is not the same thing as the position within your reader
            stream - it calls directly into waveOutGetPosition)
            </summary>
            <returns>Position in bytes</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Dispose">
            <summary>
            Closes this WaveOut device
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Dispose(System.Boolean)">
            <summary>
            Closes the WaveOut device and disposes of buffers
            </summary>
            <param name="alsoManaged">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.Resume">
            <summary>
            Resume playing after a pause from the same position
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.StartPlaybackThread">
            <summary>
            Starts the playback thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.PerformContinuousPlayback">
            <summary>
            Performs the continuous playback.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.CloseWaveOut">
            <summary>
            Closes the wave device.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WavePlayer.DisposeBuffers">
            <summary>
            Disposes the buffers.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.AudioRenderer">
            <summary>
            Provides Audio Output capabilities by writing samples to the default audio output device.
            </summary>
            <seealso cref="T:Unosquare.FFME.Rendering.Wave.IWaveProvider" />
            <seealso cref="T:Unosquare.FFME.Rendering.IRenderer" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.#ctor(Unosquare.FFME.MediaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.AudioRenderer"/> class.
            </summary>
            <param name="mediaElement">The media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.WaveFormat">
            <summary>
            Gets the output format of the audio
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.MediaElement">
            <summary>
            Gets the parent media element.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Balance">
            <summary>
            Gets or sets the balance (-1.0 to 1.0).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the wave output is muted.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Latency">
            <summary>
            Gets the realtime latency of the audio relative to the internal wall clock.
            A negative value means audio is ahead of the wall clock.
            A positive value means audio is behind of the wall clock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Position">
            <summary>
            Gets current audio the position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.DesiredLatency">
            <summary>
            Gets the desired latency odf the audio device.
            Value is always positive and typically 200ms. This means audio gets rendered up to this late behind the wall clock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.SpeedRatio">
            <summary>
            Gets the speed ratio.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Render(Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan)">
            <summary>
            Renders the specified media block.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Update(System.TimeSpan)">
            <summary>
            Called on every block rendering clock cycle just in case some update operation needs to be performed.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called whenever the audio driver requests samples.
            Do not call this method directly.
            </summary>
            <param name="targetBuffer">The render buffer.</param>
            <param name="targetBufferOffset">The render buffer offset.</param>
            <param name="requestedBytes">The requested bytes.</param>
            <returns>The number of bytes that were read.</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.OnApplicationExit(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Called when [application exit].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.ExitEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Initialize">
            <summary>
            Initializes the audio renderer.
            Call the Play Method to start reading samples
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Destroy">
            <summary>
            Destroys the audio renderer.
            Makes it useless.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Synchronize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Synchronizes audio rendering to the wall clock.
            Returns true if additional samples need to be read.
            Returns false if silence has been written and no further reading is required.
            </summary>
            <param name="targetBuffer">The target buffer.</param>
            <param name="targetBufferOffset">The target buffer offset.</param>
            <param name="requestedBytes">The requested bytes.</param>
            <returns>True to continue processing. False to write silence.</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ReadAndSlowDown(System.Int32)">
            <summary>
            Reads from the Audio Buffer and stretches the samples to the required requested bytes.
            This will make audio samples sound stretched (low pitch).
            The result is put to the first requestedBytes count of the ReadBuffer.
            requested
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ReadAndSpeedUp(System.Int32,System.Boolean)">
            <summary>
            Reads from the Audio Buffer and shrinks (averages) the samples to the required requested bytes.
            This will make audio samples sound shrunken (high pitch).
            The result is put to the first requestedBytes count of the ReadBuffer.
            </summary>
            <param name="requestedBytes">The requested number of bytes.</param>
            <param name="computeAverage">if set to <c>true</c> average samples per block. Otherwise, take the first sample per block only</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ApplyVolumeAndBalance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Applies volume and balance to the audio samples storead in RedBuffer and writes them
            to the specified target buffer.
            </summary>
            <param name="targetBuffer">The target buffer.</param>
            <param name="targetBufferOffset">The target buffer offset.</param>
            <param name="requestedBytes">The requested number of bytes.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.IRenderer">
            <summary>
            Provides a unified API for media rendering classes
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.IRenderer.MediaElement">
            <summary>
            Gets the parent media element.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Render(Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan)">
            <summary>
            Called when a media block is due rendering.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.IRenderer.Update(System.TimeSpan)">
            <summary>
            Called on every block rendering clock cycle just in case some update operation needs to be performed.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.SubtitleRenderer">
            <summary>
            Subtitle Renderer - Does nothing at this point.
            </summary>
            <seealso cref="T:Unosquare.FFME.Rendering.IRenderer" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.SyncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.BlockText">
            <summary>
            Holds the text to be rendered when the Update method is called.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.RenderedText">
            <summary>
            Holds the text that was last rendered when Update was called.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.#ctor(Unosquare.FFME.MediaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.SubtitleRenderer"/> class.
            </summary>
            <param name="mediaElement">The media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitleRenderer.MediaElement">
            <summary>
            Gets the parent media element.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Render(Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan)">
            <summary>
            Renders the specified media block.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Update(System.TimeSpan)">
            <summary>
            Called when a media block must stop being rendered.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.GetTextBlocks">
            <summary>
            Gets or creates the tex blocks that make up the subtitle text and outline.
            </summary>
            <returns>The text blocks including the fill and outline (5 total)</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.SetText(System.String)">
            <summary>
            Sets the text to be rendered on the text blocks.
            Returns immediately because it enqueues the action on the UI thread.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.VideoRenderer">
            <summary>
            Provides Video Image Rendering via a WPF Writable Bitmap
            </summary>
            <seealso cref="T:Unosquare.FFME.Rendering.IRenderer" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.VideoRenderer.TargetBitmap">
            <summary>
            The bitmap that is presented to the user.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.VideoRenderer.IsRenderingInProgress">
            <summary>
            Set when a bitmap is being written to the target bitmap
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.#ctor(Unosquare.FFME.MediaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.VideoRenderer"/> class.
            </summary>
            <param name="mediaElement">The media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.MediaElement">
            <summary>
            Gets the parent media element.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Render(Unosquare.FFME.Decoding.MediaBlock,System.TimeSpan)">
            <summary>
            Renders the specified media block.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Update(System.TimeSpan)">
            <summary>
            Called on every block rendering clock cycle just in case some update operation needs to be performed.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.InitializeTargetBitmap(Unosquare.FFME.Decoding.VideoBlock)">
            <summary>
            Initializes the target bitmap. Pass a null block to initialize with the default video properties.
            </summary>
            <param name="block">The block.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.ApplyScaleTransform(Unosquare.FFME.Decoding.VideoBlock)">
            <summary>
            Applies the scale transform according to the block's aspect ratio.
            </summary>
            <param name="b">The b.</param>
        </member>
        <member name="T:Unosquare.FFME.MediaLogMessageType">
            <summary>
            Defines the different log message types received by the log handler
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.None">
            <summary>
            The none messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.Info">
            <summary>
            The information messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.Debug">
            <summary>
            The debug messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.Trace">
            <summary>
            The trace messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.Error">
            <summary>
            The error messge type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaLogMessageType.Warning">
            <summary>
            The warning messge type
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaContainerException">
            <summary>
            A Media Container Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.FFME.MediaContainerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaContainerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Unosquare.FFME.MediaOptions">
            <summary>
            Represents a set of options that are used to initialize a media container.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.ForcedInputFormat">
            <summary>
            Gets or sets the forced input format. If let null or empty,
            the input format will be selected automatically.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.EnableLowRes">
            <summary>
            Gets or sets a value indicating whether [enable low resource].
            In theroy this should be 0,1,2,3 for 1, 1/2, 1,4 and 1/8 resolutions.
            TODO: We are for now just supporting 1/2 rest (true value)
            Port of lowres.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.EnableFastDecoding">
            <summary>
            Gets or sets a value indicating whether [enable fast decoding].
            Port of fast
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.FormatOptions">
            <summary>
            A dictionary of Format options.
            Supported format options are specified in https://www.ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.CodecOptions">
            <summary>
            Gets the codec options.
            Codec options are documented here: https://www.ffmpeg.org/ffmpeg-codecs.html#Codec-Options
            Port of codec_opts
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.EnableHardwareAcceleration">
            <summary>
            Gets or sets a value indicating whether experimental hardware acceleration is enabled.
            Defaults to false. This feature is experimental.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.GeneratePts">
            <summary>
            Gets or sets a value indicating whether PTS are generated automatically and not read
            from the packets themselves. Defaults to false.
            Port of genpts
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.MaxAnalyzeDuration">
            <summary>
            Gets or sets the maximum duration to be analyzed before ifentifying stream information.
            In realtime streams this can be reduced to reduce latency (i.e. TimeSpan.Zero)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.ProbeSize">
            <summary>
            Gets or sets the amount of bytes to probe before getting the stram info
            In realtime streams probesize can be reduced to reduce latency.
            Minimum value is 32.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.ReadTimeout">
            <summary>
            Gets or sets the amount of time to wait for a an open or read operation to complete.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.IsAudioDisabled">
            <summary>
            Prevent reading from audio stream components.
            Port of audio_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.IsVideoDisabled">
            <summary>
            Prevent reading from video stream components.
            Port of video_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.IsSubtitleDisabled">
            <summary>
            Prevent reading from subtitle stream components.
            Port of subtitle_disable
            Subtitles are not yet first-class citizens in FFmpeg and 
            this is why they are disabled by default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.VideoFilter">
            <summary>
            Allows for a custom video filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Video-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.VideoStream">
            <summary>
            Initially contains the best suitable video stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.AudioFilter">
            <summary>
            Allows for a custom audio filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Audio-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.AudioStream">
            <summary>
            Initially contains the best suitable audio stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOptions.SubtitleStream">
            <summary>
            Initially contains the best suitable subititle stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaCodecOptions">
            <summary>
            Represents a set of codec options associated with a stream specifier.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaCodecOptions.Options">
            <summary>
            Holds the internal list of option items
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaCodecOptions"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.Add(System.String,System.String,System.Char)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamType">Type of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.Add(System.String,System.String,System.Int32)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.Add(System.String,System.String,System.Char,System.Int32)">
            <summary>
            Adds an option
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="streamType">Type of the stream.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.FilterOptions(FFmpeg.AutoGen.AVCodecID,FFmpeg.AutoGen.AVFormatContext*,FFmpeg.AutoGen.AVStream*,FFmpeg.AutoGen.AVCodec*)">
            <summary>
            Retrieves a dictionary with the options for the specified codec.
            Port of filter_codec_opts
            </summary>
            <param name="codecId">The codec identifier.</param>
            <param name="format">The format.</param>
            <param name="stream">The stream.</param>
            <param name="codec">The codec.</param>
            <returns>The filtered options</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.GetPerStreamOptions(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Retrieves an array of dictionaries, one for each stream index
            https://ffmpeg.org/ffplay.html#toc-Options
            Port of setup_find_stream_info_opts.
            </summary>
            <param name="format">The format.</param>
            <returns>The options per stream</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaCodecOptions.CharToMediaType(System.Char)">
            <summary>
            Converts a character to a media type.
            </summary>
            <param name="c">The c.</param>
            <returns>The media type</returns>
        </member>
        <member name="T:Unosquare.FFME.MediaOpeningRoutedEventArgs">
            <summary>
            Represents the event arguments of the MediaOpening routed event.
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.MediaOpeningRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Unosquare.FFME.MediaOptions,Unosquare.FFME.MediaInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaOpeningRoutedEventArgs" /> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <param name="info">The input information.</param>
        </member>
        <member name="P:Unosquare.FFME.MediaOpeningRoutedEventArgs.Options">
            <summary>
            Set or change the options before the media is opened.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaOpeningRoutedEventArgs.Info">
            <summary>
            Provides internal details of the media, inclusing its component streams.
            Typically, options are set based on what this information contains.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.FFmpegMediaElementBackground">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
